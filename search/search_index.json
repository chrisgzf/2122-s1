{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Announcements Lecture 1 Mon Aug 10 14:17:40 +08 2020 Lecture 1 has been recorded and posted. You can watch it here . Please read through the notes and watch the lecture. After that, you can try the post-lecture diagnostic quiz to test your own understanding. The slides are posted as well. Notes for Lecture 1 Posted Sun Aug 9 07:20:35 +08 2020 We will cover Unit 1 and Unit 2 in our very first lecture. You can always check out the notes under the menu items notes. Getting Ready for CS1010 Welcome to CS1010! Here are some things that you can do while waiting for the semester to start. Take a Look at General CS1010 Information Take a look at the crucial information about CS1010 here. Scan through the learning outcomes to know what you are expected to learn in this module. Note down the important dates on your calendar. Read about CS1010 Policies The general policies for CS1010 is posted. Go through it to see what is expected. Read Feedback on CS1010 from Two Years Ago This semester's CS1010 will be conducted in a similar style with the version in 2018. Read the comments from that batch of students to know what to expect. Explore Some Additional Readings Some extra reading materials curated by Wei Tsang are available . In particular, check out the articles under Must Read section. If you have some programming background and are wondering why we are teaching C, read the articles under Why C section. Enable Your Piazza Account You should have received an email inviting you to create a Piazza account and enroll in the module Q&A forum. Please join CS1010 on Piazza. Enable Your SoC Account Go to https://mysoc.nus.edu.sg/~newacct and create your SoC Unix Account if you have not done so. Activate \"General Unix Servers\" and \"The SoC Compute Cluster\" in MySoC here: https://mysoc.nus.edu.sg/~myacct/services.cgi Create a GitHub Account Create a GitHub account if you do not have one. This account should stay with you for your professional career. So choose the username wisely. Get a Head-Start with Unix and Vim If you did not register for the SoC Unix@Home Workshop , you can still head to the website and take a look at the notes and follow through with the examples. If you have questions or face any issues, ask on Piazza .","title":"Home"},{"location":"index.html#announcements","text":"Lecture 1 Mon Aug 10 14:17:40 +08 2020 Lecture 1 has been recorded and posted. You can watch it here . Please read through the notes and watch the lecture. After that, you can try the post-lecture diagnostic quiz to test your own understanding. The slides are posted as well. Notes for Lecture 1 Posted Sun Aug 9 07:20:35 +08 2020 We will cover Unit 1 and Unit 2 in our very first lecture. You can always check out the notes under the menu items notes. Getting Ready for CS1010 Welcome to CS1010! Here are some things that you can do while waiting for the semester to start. Take a Look at General CS1010 Information Take a look at the crucial information about CS1010 here. Scan through the learning outcomes to know what you are expected to learn in this module. Note down the important dates on your calendar. Read about CS1010 Policies The general policies for CS1010 is posted. Go through it to see what is expected. Read Feedback on CS1010 from Two Years Ago This semester's CS1010 will be conducted in a similar style with the version in 2018. Read the comments from that batch of students to know what to expect. Explore Some Additional Readings Some extra reading materials curated by Wei Tsang are available . In particular, check out the articles under Must Read section. If you have some programming background and are wondering why we are teaching C, read the articles under Why C section. Enable Your Piazza Account You should have received an email inviting you to create a Piazza account and enroll in the module Q&A forum. Please join CS1010 on Piazza. Enable Your SoC Account Go to https://mysoc.nus.edu.sg/~newacct and create your SoC Unix Account if you have not done so. Activate \"General Unix Servers\" and \"The SoC Compute Cluster\" in MySoC here: https://mysoc.nus.edu.sg/~myacct/services.cgi Create a GitHub Account Create a GitHub account if you do not have one. This account should stay with you for your professional career. So choose the username wisely. Get a Head-Start with Unix and Vim If you did not register for the SoC Unix@Home Workshop , you can still head to the website and take a look at the notes and follow through with the examples. If you have questions or face any issues, ask on Piazza .","title":"Announcements"},{"location":"01-program.html","text":"Unit 1: What is a Program? Learning Outcomes After this unit, students should: have an idea of what is a program and how a program is executed by a computer understand the basic terminologies: machine code, assembly language, and higher-level programming languages What is a (computer) program? Despite all the wonderful and amazing things that computers can do, computers are not very smart. In fact, they are pretty dumb. Computers can only follow the instructions given by a human. A computer program is a sequence of step-by-step instructions given to computers to manipulate data in order to perform a certain task. Programming is the art and science of writing a computer program, and that is what you will learn to do in CS1010. How computer executes a program In order to learn how to write a program, it is important to have an overview of how a computer executes a program. You will learn in details how this is done in CS2100/CS2106 or EE2024/CG2271, but for CS1010, we will take a very simplistic and high-level view of this process. The two important components of a computer we will discuss for CS1010 is the CPU, or central processing unit and the memory, which is a generalized term for where we store the data to be processed or manipulated by the CPU, as well as the instructions to do so. A memory location is addressable using a memory address . The instructions to the CPU comes in the form of machine code , a sequence of bits (1s and 0s) that is interpreted and then followed by the CPU to do certain things. These machine code could instruct the CPU, for instance, to compare if a particular number at a certain memory location is more than 0, to add one number to another, or to execute another instruction at another memory location. The data stored in the memory is also stored as a sequence of 1s and 0s. From Machine Code to High-level Programming Language While it is possible for us, human, to write machine code directly, few actually do since it is challenging to do so. Different CPUs understand different sets of machine code; it is tedious to figure out where each piece of data is located in the memory (this location is actually determined by the operating system). The resulting code, even when it is correct and easy to read and understand by the machine, are often hard to decipher for a human. Simple operations such as comparing two numbers to see which one is bigger might require several instructions to perform. To get around the readability problem, programmers can code in assembly language -- a human-readable form of machine code, where each instruction, instead of represented by 0s and 1s, is represented by a mnemonic (such as decr , incr , store , add , etc.) Writing assembly code does not address the issues of machine-dependent code and the tediousness of programming. Early programmers (in the fifties) understood this and designed high-level programming languages , where programmers can describe the operations that they wish to do in a language closer to their intention that is machine independent. A program written in one of these programming languages is then compiled into machine code for a specific CPU for execution using a compiler. The first commercially available language is FORTRAN from IBM in the 1950s. Among many early programming languages, C (birth year 1972) is the only one that is still popular and widely used today, For many reasons , C is the language of choice for CS1010. The Goals of CS1010 This brings us to the goals of CS1010. First, you will learn the most important syntax element of the C programming language. Second, you will learn how a C program behaves, in relation to how a program is executed and how data are stored and manipulated in memory. Third, you will learn the various tools and techniques that will help you produce good and correct C programs. The last, and the most important and challenging goal of CS1010, however, is that you will learn how to write programs to solve computational problems. Learning to write a program that does what you want it to do is actually not difficult. Knowing what you want your program to do is the more challenging part!","title":"1. What is a Program?"},{"location":"01-program.html#unit-1-what-is-a-program","text":"","title":"Unit 1: What is a Program?"},{"location":"01-program.html#learning-outcomes","text":"After this unit, students should: have an idea of what is a program and how a program is executed by a computer understand the basic terminologies: machine code, assembly language, and higher-level programming languages","title":"Learning Outcomes"},{"location":"01-program.html#what-is-a-computer-program","text":"Despite all the wonderful and amazing things that computers can do, computers are not very smart. In fact, they are pretty dumb. Computers can only follow the instructions given by a human. A computer program is a sequence of step-by-step instructions given to computers to manipulate data in order to perform a certain task. Programming is the art and science of writing a computer program, and that is what you will learn to do in CS1010.","title":"What is a (computer) program?"},{"location":"01-program.html#how-computer-executes-a-program","text":"In order to learn how to write a program, it is important to have an overview of how a computer executes a program. You will learn in details how this is done in CS2100/CS2106 or EE2024/CG2271, but for CS1010, we will take a very simplistic and high-level view of this process. The two important components of a computer we will discuss for CS1010 is the CPU, or central processing unit and the memory, which is a generalized term for where we store the data to be processed or manipulated by the CPU, as well as the instructions to do so. A memory location is addressable using a memory address . The instructions to the CPU comes in the form of machine code , a sequence of bits (1s and 0s) that is interpreted and then followed by the CPU to do certain things. These machine code could instruct the CPU, for instance, to compare if a particular number at a certain memory location is more than 0, to add one number to another, or to execute another instruction at another memory location. The data stored in the memory is also stored as a sequence of 1s and 0s.","title":"How computer executes a program"},{"location":"01-program.html#from-machine-code-to-high-level-programming-language","text":"While it is possible for us, human, to write machine code directly, few actually do since it is challenging to do so. Different CPUs understand different sets of machine code; it is tedious to figure out where each piece of data is located in the memory (this location is actually determined by the operating system). The resulting code, even when it is correct and easy to read and understand by the machine, are often hard to decipher for a human. Simple operations such as comparing two numbers to see which one is bigger might require several instructions to perform. To get around the readability problem, programmers can code in assembly language -- a human-readable form of machine code, where each instruction, instead of represented by 0s and 1s, is represented by a mnemonic (such as decr , incr , store , add , etc.) Writing assembly code does not address the issues of machine-dependent code and the tediousness of programming. Early programmers (in the fifties) understood this and designed high-level programming languages , where programmers can describe the operations that they wish to do in a language closer to their intention that is machine independent. A program written in one of these programming languages is then compiled into machine code for a specific CPU for execution using a compiler. The first commercially available language is FORTRAN from IBM in the 1950s. Among many early programming languages, C (birth year 1972) is the only one that is still popular and widely used today, For many reasons , C is the language of choice for CS1010.","title":"From Machine Code to High-level Programming Language"},{"location":"01-program.html#the-goals-of-cs1010","text":"This brings us to the goals of CS1010. First, you will learn the most important syntax element of the C programming language. Second, you will learn how a C program behaves, in relation to how a program is executed and how data are stored and manipulated in memory. Third, you will learn the various tools and techniques that will help you produce good and correct C programs. The last, and the most important and challenging goal of CS1010, however, is that you will learn how to write programs to solve computational problems. Learning to write a program that does what you want it to do is actually not difficult. Knowing what you want your program to do is the more challenging part!","title":"The Goals of CS1010"},{"location":"02-algo.html","text":"Unit 2: Computational Problems and Algorithms Learning Outcomes: After this unit, students should: be able to differentiate between a computational and a non-computational problem; understand the basic terminologies: computational problem solving, algorithm, flowchart, debugging, testing, variables, value, assignment; be familiar with the algorithm to find the maximum among a list of numbers; be able to express an algorithm using a flowchart; be able to trace through flowcharts that involves branching, looping, and updates of variables; understand the notion of the \"correctness\" of an algorithm. Computational Problems So, what is computational problem solving? Let's start with the question, what is a computational problem ? A computational problem is a problem that can be solved step-by-step with a computer. These problems usually have a well-defined input, constraints, and conditions that the output must satisfied. Here are some types of computational problems: A decision problem is one where the answer is yes or no. For instance, \"given a number n n , is n n even?\" is a decision problem. Some decision problems take more steps to solve than others. For instance, \"given a number n n , is n n prime?\" takes more steps than just checking the parity of a number. A search problem is one where the solution consists of one or more values that satisfies a given condition. For instance, we may want to compute a path from one geographical location to another on a map. A counting problem is one where the answer is the number of solutions to a search problem. An optimization problem is one where the solution is the \"best\" possible solution, where the \"best\" can be defined in a different way. For instance, we may want to compute the fastest route from one location to another. Questions such as \"what is the meaning of life?\" \"do I look good in this outfit?\" 1 are not computational problems, because they do not have well-defined input, constraints, and conditions that the output must satisfy. In CS1010 (followed by CS2040C and CS3230), you will learn how to solve computational problems computationally -- this means that you learn to come up with step-by-step instructions meant for computers that you can translate into computer programs, to solve a given problem. Example: Finding the maximum Let's start with a simple problem. Given a finite list L L of k k integers ( k k > 0), find the maximum integer from the list. First, let's consider if this is a computational problem. The input is very well defined. We know what an integer is. We are told we have at least one, and we have a finite number of them 2 . Second, let's consider the output. What conditions must the output satisfy? First, it has to be equal or larger than every other integer on the list. Second, it must be an integer in the list. This is well defined by the problem statement, so we can say that it is a computational problem. Here is an example. Suppose the input consists of: 4 1 -4 0 9 9 3 5 8 The output should be 9 . Now, you should pause reading and think about how you would solve this step-by-step. Algorithm One way to solve this problem is to check through the integers in the list, one-by-one, and keep track of the maximum value so far. When you reach the end of the list, your \"maximum value so far\" will also be the maximum for the whole list. Let's look at an example: Integers Scanned Maximum So Far 4 4 4 1 4 4 1 -4 4 4 1 -4 0 4 4 1 -4 0 9 9 4 1 -4 0 9 9 9 4 1 -4 0 9 9 3 9 4 1 -4 0 9 9 3 5 9 4 1 -4 0 9 9 3 5 8 9 The English description above, however, is not detailed enough for computers to understand. What is the meaning of \"check one-by-one\"? \"keep track of maximum so far\"? how to tell if we have reached \"the end of the list\"? Let's work out all the details. First, we need a concise way of representing the integers in the list. Borrowing from mathematical notation, let's say that the list L L contains the integers l_0, l_1, ..., l_{k-1} l_0, l_1, ..., l_{k-1} . To \"check one-by-one,\" we introduce another notation l_i l_i , which is the integer currently being \"checked\". We begin with i = 0 i = 0 , then i = 1 i = 1 , then i = 2 i = 2 , etc, until i = k-1 i = k-1 . At every step, we increase i i by 1. Second, we need a concise way of keeping track of the maximum so far. We introduce another notation, m m , to represent the maximum value so far. When i = 0 i = 0 , m = l_0 m = l_0 . Since we only scan a single integer, it has to be the maximum. When we check another integer l_i (i > 0) l_i (i > 0) , only two things can happen: if this l_i l_i is larger than m m , then l_i l_i has to be the maximum so far, so we update m m to be l_i l_i . if l_i l_i is equal to or smaller than m m , then m m is still the maximum value so far. We keep doing the above and increase i i , until we reach the end of the list when (after increasing i i ) we find that i i is k k . Now, we have enough details to describe step-by-step, how to find the maximum value from a list of integers. Such steps, which the computer can take to solve a problem, is called an algorithm . Flowchart There are different ways one can describe an algorithm. The easiest way I find is to use a diagram called a flowchart . The flowchart for the algorithm above looks like this. There are several components to a flowchart. We will use the following convention in CS1010: An arrow indicates the direction of the flow, i.e., what is the next step of the algorithm. A rounded rectangle denotes either the starting (inputs) or ending point (output) of the algorithm. A diamond box represents a \"question\" that can be true or false (yes or no). It indicates a \"branch\" in the flow. Which branch we follow is deteremined the answer to the question in the box. A rectangle represents one or more \"operations\" (such as initialization or manipulation of data) To understand the flowchart above, let's trace through it with the sample input. We will maintain the following table as we trace through the flowchart. At the beginning, just before entering \" i i equals k k ?\", we have the following: Integers Scanned i i l_i l_i k k Maximum So Far ( m m ) 4 1 1 9 4 Subsequently, we enter a \"loop\", and the values assigned to the symbols at the point after \" i i equals k k ?\" can be traced as follows: Integers Scanned i i l_i l_i k k Maximum So Far ( m m ) 4 1 1 1 9 4 4 1 -4 2 -4 9 4 4 1 -4 0 3 0 9 4 4 1 -4 0 9 4 9 9 4 4 1 -4 0 9 9 5 9 9 9 4 1 -4 0 9 9 3 6 3 9 9 4 1 -4 0 9 9 3 5 7 5 9 9 4 1 -4 0 9 9 3 5 8 8 8 9 9 4 1 -4 0 9 9 3 5 8 9 `` 9 9 Please spend some time to trace through the flowchart above. Variables There are a few important things to take note here. m m , i i , k k , and the list L L are what we called states or variables . While in the above, we can think of them as mathematical variables which we can assign values to, in a computer program, a variable is a location in the memory which holds a value. We can perform two very basic operations on the variables: reading and writing. In other words, we can set their values and we can retrieve their values. We can assign the value of one variable to a constant (e.g., set i i to 1) or to the value of another variable (e.g., set m m to l_i l_i ). In the latter example, we first read the value of l_i l_i , from l_i l_i 's memory location and then we write that value to the memory location of m m . Once written, the value of m m will not change until the next time we update the value of m m . It is important to note that, when i i changes, m m does not change automatically to the new l_i l_i This behavior is different from that which you may be familiar with in spreadsheet software -- if you set the value of a cell, say A1 to be =B1 , when the value in cell B1 changes, the value A1 also changes automatically. We can also compare the values of two variables. We see two examples above: \" i i equals k k ?\" \" l_i > m l_i > m ?\" When we compare, we read the values of the variables from their memory location and checks their relations. We can perform arithmetic operations on the variables: addition, subtraction, etc. We see one example above: \"increment i i \". This operation is actually an assignment operation in disguise. We can write it as \"set i i to i i + 1\". Here, you see that i i is referred to twice. This operation reads the value from the memory location of i i , adds 1 to it, and then writes the resulting value back to the location of i i . Bugs If you follow the execution of the algorithm above, step-by-step, using the example input 4 1 -4 0 9 9 3 5 above, you will obtain the correct maximum value m m of 9 . But does that mean that the algorithm is correct? The answer is NO. For an algorithm to correctly solve the given problem, it has to produce the correct result for all valid inputs to the problem. If we can find one counterexample, one input where the algorithm does not produce the correct output, then the algorithm is incorrect. Note that I say does not produce the correct output , which means that either the algorithm produces the wrong output or does not produce any output at all . In this case, we say that the algorithm or the program has a bug . A bug is a defect that causes the algorithm to behave incorrectly. As a software developer, you will spend some time finding bugs in your code, a process known as debugging . A debugger is a tool that helps programmers find bugs in their code. Before we even start the process of debugging, we first have to know if our algorithm is correct. Remember that an algorithm is correct only if it produces the correct output only all possible valid inputs. So, one way to check if an algorithm is correct is to try it with all possible valid inputs. For the problem we are solving above, however, even though the list is finite, there are infinitely many possible inputs, and so, it is impossible to try all possible valid inputs. In practice, we craft a smaller set of test inputs to check if the algorithm behaves correctly for these test inputs, and hope that it is correct for all possible inputs. With experience, you will choose the right set of test inputs to maximize that chances that you will find a bug in your code. There are also systematic ways of deriving test cases so that the test cases cover different paths of execution of the algorithm, but we won't be covering it in CS1010 3 . Another way of checking if an algorithm is correct, is to reason about the behavior of the algorithm. We will do this rather informally in CS1010, starting in 1-2 lectures from now. You get to rigorously prove that an algorithm is correct in a higher level module (CS3230 Design and Analysis of Algorithms). Finally, even if an algorithm is correct, the corresponding program might not be. Recall that an algorithm is a step-by-step process to solve a problem. It is what you want your program to do. You still have to write a program (in C, or other languages) to actually have the computer do what you want it to do (in other words, to implement the algorithm ). This process of translating the algorithm to a computer program, called coding may introduce bugs as well. But we will worry about this later when we learn to program. In the problem set at the end of this lecture, you will see slight variations of the algorithm above. You should check through them to see whether they are correct or not. Problem Set Problem 1.1 The following algorithms are slight variations of the one in the notes above. The differences are highlighted in red. Do they correctly find the maximum integer from a finite list of k k integers ( k > 0 k > 0 )? If an algorithm is buggy, give a counter-example where the output is incorrect. In addition, give an example input where the algorithm still produces the correct output, where possible. (a) (b) (c) (d) (e) Problem 1.2 Change the algorithm above to find the minimum value instead of the maximum value from the given list L = \\langle l_0, ..., l_{k-1}\\rangle L = \\langle l_0, ..., l_{k-1}\\rangle . You can also assume that the list L L is finite and k > 0 k > 0 for this question. Problem 1.3 Draw the flowchart for an algorithm, that takes in a list of integers L = \\langle l_0, ..., l_{k-1}\\rangle, k > 0 L = \\langle l_0, ..., l_{k-1}\\rangle, k > 0 , and compute the sum of all the integers. Think about what variable(s) do you need. The answer is, by the way, always \"Yes.\" \u21a9 Think about why it is important to have a finite number of integers in the input. \u21a9 Software testing is a body of knowledge worthy of an advanced module by itself -- we offer one in CS4218. \u21a9","title":"2. Computational Problem & Algorithms"},{"location":"02-algo.html#unit-2-computational-problems-and-algorithms","text":"","title":"Unit 2: Computational Problems and Algorithms"},{"location":"02-algo.html#learning-outcomes","text":"After this unit, students should: be able to differentiate between a computational and a non-computational problem; understand the basic terminologies: computational problem solving, algorithm, flowchart, debugging, testing, variables, value, assignment; be familiar with the algorithm to find the maximum among a list of numbers; be able to express an algorithm using a flowchart; be able to trace through flowcharts that involves branching, looping, and updates of variables; understand the notion of the \"correctness\" of an algorithm.","title":"Learning Outcomes:"},{"location":"02-algo.html#computational-problems","text":"So, what is computational problem solving? Let's start with the question, what is a computational problem ? A computational problem is a problem that can be solved step-by-step with a computer. These problems usually have a well-defined input, constraints, and conditions that the output must satisfied. Here are some types of computational problems: A decision problem is one where the answer is yes or no. For instance, \"given a number n n , is n n even?\" is a decision problem. Some decision problems take more steps to solve than others. For instance, \"given a number n n , is n n prime?\" takes more steps than just checking the parity of a number. A search problem is one where the solution consists of one or more values that satisfies a given condition. For instance, we may want to compute a path from one geographical location to another on a map. A counting problem is one where the answer is the number of solutions to a search problem. An optimization problem is one where the solution is the \"best\" possible solution, where the \"best\" can be defined in a different way. For instance, we may want to compute the fastest route from one location to another. Questions such as \"what is the meaning of life?\" \"do I look good in this outfit?\" 1 are not computational problems, because they do not have well-defined input, constraints, and conditions that the output must satisfy. In CS1010 (followed by CS2040C and CS3230), you will learn how to solve computational problems computationally -- this means that you learn to come up with step-by-step instructions meant for computers that you can translate into computer programs, to solve a given problem.","title":"Computational Problems"},{"location":"02-algo.html#example-finding-the-maximum","text":"Let's start with a simple problem. Given a finite list L L of k k integers ( k k > 0), find the maximum integer from the list. First, let's consider if this is a computational problem. The input is very well defined. We know what an integer is. We are told we have at least one, and we have a finite number of them 2 . Second, let's consider the output. What conditions must the output satisfy? First, it has to be equal or larger than every other integer on the list. Second, it must be an integer in the list. This is well defined by the problem statement, so we can say that it is a computational problem. Here is an example. Suppose the input consists of: 4 1 -4 0 9 9 3 5 8 The output should be 9 . Now, you should pause reading and think about how you would solve this step-by-step.","title":"Example: Finding the maximum"},{"location":"02-algo.html#algorithm","text":"One way to solve this problem is to check through the integers in the list, one-by-one, and keep track of the maximum value so far. When you reach the end of the list, your \"maximum value so far\" will also be the maximum for the whole list. Let's look at an example: Integers Scanned Maximum So Far 4 4 4 1 4 4 1 -4 4 4 1 -4 0 4 4 1 -4 0 9 9 4 1 -4 0 9 9 9 4 1 -4 0 9 9 3 9 4 1 -4 0 9 9 3 5 9 4 1 -4 0 9 9 3 5 8 9 The English description above, however, is not detailed enough for computers to understand. What is the meaning of \"check one-by-one\"? \"keep track of maximum so far\"? how to tell if we have reached \"the end of the list\"? Let's work out all the details. First, we need a concise way of representing the integers in the list. Borrowing from mathematical notation, let's say that the list L L contains the integers l_0, l_1, ..., l_{k-1} l_0, l_1, ..., l_{k-1} . To \"check one-by-one,\" we introduce another notation l_i l_i , which is the integer currently being \"checked\". We begin with i = 0 i = 0 , then i = 1 i = 1 , then i = 2 i = 2 , etc, until i = k-1 i = k-1 . At every step, we increase i i by 1. Second, we need a concise way of keeping track of the maximum so far. We introduce another notation, m m , to represent the maximum value so far. When i = 0 i = 0 , m = l_0 m = l_0 . Since we only scan a single integer, it has to be the maximum. When we check another integer l_i (i > 0) l_i (i > 0) , only two things can happen: if this l_i l_i is larger than m m , then l_i l_i has to be the maximum so far, so we update m m to be l_i l_i . if l_i l_i is equal to or smaller than m m , then m m is still the maximum value so far. We keep doing the above and increase i i , until we reach the end of the list when (after increasing i i ) we find that i i is k k . Now, we have enough details to describe step-by-step, how to find the maximum value from a list of integers. Such steps, which the computer can take to solve a problem, is called an algorithm .","title":"Algorithm"},{"location":"02-algo.html#flowchart","text":"There are different ways one can describe an algorithm. The easiest way I find is to use a diagram called a flowchart . The flowchart for the algorithm above looks like this. There are several components to a flowchart. We will use the following convention in CS1010: An arrow indicates the direction of the flow, i.e., what is the next step of the algorithm. A rounded rectangle denotes either the starting (inputs) or ending point (output) of the algorithm. A diamond box represents a \"question\" that can be true or false (yes or no). It indicates a \"branch\" in the flow. Which branch we follow is deteremined the answer to the question in the box. A rectangle represents one or more \"operations\" (such as initialization or manipulation of data) To understand the flowchart above, let's trace through it with the sample input. We will maintain the following table as we trace through the flowchart. At the beginning, just before entering \" i i equals k k ?\", we have the following: Integers Scanned i i l_i l_i k k Maximum So Far ( m m ) 4 1 1 9 4 Subsequently, we enter a \"loop\", and the values assigned to the symbols at the point after \" i i equals k k ?\" can be traced as follows: Integers Scanned i i l_i l_i k k Maximum So Far ( m m ) 4 1 1 1 9 4 4 1 -4 2 -4 9 4 4 1 -4 0 3 0 9 4 4 1 -4 0 9 4 9 9 4 4 1 -4 0 9 9 5 9 9 9 4 1 -4 0 9 9 3 6 3 9 9 4 1 -4 0 9 9 3 5 7 5 9 9 4 1 -4 0 9 9 3 5 8 8 8 9 9 4 1 -4 0 9 9 3 5 8 9 `` 9 9 Please spend some time to trace through the flowchart above.","title":"Flowchart"},{"location":"02-algo.html#variables","text":"There are a few important things to take note here. m m , i i , k k , and the list L L are what we called states or variables . While in the above, we can think of them as mathematical variables which we can assign values to, in a computer program, a variable is a location in the memory which holds a value. We can perform two very basic operations on the variables: reading and writing. In other words, we can set their values and we can retrieve their values. We can assign the value of one variable to a constant (e.g., set i i to 1) or to the value of another variable (e.g., set m m to l_i l_i ). In the latter example, we first read the value of l_i l_i , from l_i l_i 's memory location and then we write that value to the memory location of m m . Once written, the value of m m will not change until the next time we update the value of m m . It is important to note that, when i i changes, m m does not change automatically to the new l_i l_i This behavior is different from that which you may be familiar with in spreadsheet software -- if you set the value of a cell, say A1 to be =B1 , when the value in cell B1 changes, the value A1 also changes automatically. We can also compare the values of two variables. We see two examples above: \" i i equals k k ?\" \" l_i > m l_i > m ?\" When we compare, we read the values of the variables from their memory location and checks their relations. We can perform arithmetic operations on the variables: addition, subtraction, etc. We see one example above: \"increment i i \". This operation is actually an assignment operation in disguise. We can write it as \"set i i to i i + 1\". Here, you see that i i is referred to twice. This operation reads the value from the memory location of i i , adds 1 to it, and then writes the resulting value back to the location of i i .","title":"Variables"},{"location":"02-algo.html#bugs","text":"If you follow the execution of the algorithm above, step-by-step, using the example input 4 1 -4 0 9 9 3 5 above, you will obtain the correct maximum value m m of 9 . But does that mean that the algorithm is correct? The answer is NO. For an algorithm to correctly solve the given problem, it has to produce the correct result for all valid inputs to the problem. If we can find one counterexample, one input where the algorithm does not produce the correct output, then the algorithm is incorrect. Note that I say does not produce the correct output , which means that either the algorithm produces the wrong output or does not produce any output at all . In this case, we say that the algorithm or the program has a bug . A bug is a defect that causes the algorithm to behave incorrectly. As a software developer, you will spend some time finding bugs in your code, a process known as debugging . A debugger is a tool that helps programmers find bugs in their code. Before we even start the process of debugging, we first have to know if our algorithm is correct. Remember that an algorithm is correct only if it produces the correct output only all possible valid inputs. So, one way to check if an algorithm is correct is to try it with all possible valid inputs. For the problem we are solving above, however, even though the list is finite, there are infinitely many possible inputs, and so, it is impossible to try all possible valid inputs. In practice, we craft a smaller set of test inputs to check if the algorithm behaves correctly for these test inputs, and hope that it is correct for all possible inputs. With experience, you will choose the right set of test inputs to maximize that chances that you will find a bug in your code. There are also systematic ways of deriving test cases so that the test cases cover different paths of execution of the algorithm, but we won't be covering it in CS1010 3 . Another way of checking if an algorithm is correct, is to reason about the behavior of the algorithm. We will do this rather informally in CS1010, starting in 1-2 lectures from now. You get to rigorously prove that an algorithm is correct in a higher level module (CS3230 Design and Analysis of Algorithms). Finally, even if an algorithm is correct, the corresponding program might not be. Recall that an algorithm is a step-by-step process to solve a problem. It is what you want your program to do. You still have to write a program (in C, or other languages) to actually have the computer do what you want it to do (in other words, to implement the algorithm ). This process of translating the algorithm to a computer program, called coding may introduce bugs as well. But we will worry about this later when we learn to program. In the problem set at the end of this lecture, you will see slight variations of the algorithm above. You should check through them to see whether they are correct or not.","title":"Bugs"},{"location":"02-algo.html#problem-set","text":"","title":"Problem Set"},{"location":"02-algo.html#problem-11","text":"The following algorithms are slight variations of the one in the notes above. The differences are highlighted in red. Do they correctly find the maximum integer from a finite list of k k integers ( k > 0 k > 0 )? If an algorithm is buggy, give a counter-example where the output is incorrect. In addition, give an example input where the algorithm still produces the correct output, where possible. (a) (b) (c) (d) (e)","title":"Problem 1.1"},{"location":"02-algo.html#problem-12","text":"Change the algorithm above to find the minimum value instead of the maximum value from the given list L = \\langle l_0, ..., l_{k-1}\\rangle L = \\langle l_0, ..., l_{k-1}\\rangle . You can also assume that the list L L is finite and k > 0 k > 0 for this question.","title":"Problem 1.2"},{"location":"02-algo.html#problem-13","text":"Draw the flowchart for an algorithm, that takes in a list of integers L = \\langle l_0, ..., l_{k-1}\\rangle, k > 0 L = \\langle l_0, ..., l_{k-1}\\rangle, k > 0 , and compute the sum of all the integers. Think about what variable(s) do you need. The answer is, by the way, always \"Yes.\" \u21a9 Think about why it is important to have a finite number of integers in the input. \u21a9 Software testing is a body of knowledge worthy of an advanced module by itself -- we offer one in CS4218. \u21a9","title":"Problem 1.3"},{"location":"1819s1.html","text":"CS1010 from AY2018/19 Semester 1 Here are some information and materials from the offering of CS1010 in AY 2018/19 Semester 1. Student Feedback Midterm Final PE 1 PE 2 Lecture Slides Screencast 1 2 3 4 5 6 7 8 9 10 11 12 Note: Screencasts are password protected.","title":"18/19 Sem 1"},{"location":"1819s1.html#cs1010-from-ay201819-semester-1","text":"Here are some information and materials from the offering of CS1010 in AY 2018/19 Semester 1.","title":"CS1010 from AY2018/19 Semester 1"},{"location":"1819s1.html#student-feedback","text":"","title":"Student Feedback"},{"location":"1819s1.html#midterm","text":"","title":"Midterm"},{"location":"1819s1.html#final","text":"","title":"Final"},{"location":"1819s1.html#pe-1","text":"","title":"PE 1"},{"location":"1819s1.html#pe-2","text":"Lecture Slides Screencast 1 2 3 4 5 6 7 8 9 10 11 12 Note: Screencasts are password protected.","title":"PE 2"},{"location":"about.html","text":"About CS1010 Module Description This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. It is also the first part of a three-part series on introductory programming and problem solving by computing, which also includes CS2030 and CS2040. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for SoC students. Who/Where/When Instructor : Ooi Wei Tsang and Daren Ler Lecture Venue : Online ( Zoom link ) Lecture Time : Every Monday, 12noon - 2pm Q&A Hour via Zoom : Wei Tsang: Every Tuesday, 4pm - 5pm ( Zoom link ) Daren: Every Friday, 4pm - 5pm ( Zoom link ) Student Tutors : Aaron Ong Adi Nata Bennett Clement Chan Jun Hui Christopher Goh Zhen Fung Dao Ngoc Hieu David Livingstone Felix Halim Francisco Chensan Georgie Lee Hou Rui Hubertus Adhy Pratama Setiawan Justin Tzuriel Krisnahadi Jusuf Nathanael Khenus Tan Jia Liang Leah Roselyn James Liau Kai Jie Liu Zhuohao Muhammad Ahmed bin Anwar Bahajjaj Neil Banerjee Nicholas Teh Pang Jun Xian, Dylan Stefina Aryani Winoto Sun Yu Cheng Vasavada Tejas Wamika Malik Wang Zesong Xia Fuxi Important Dates Midterm Assessment : Monday, 28 September, 2020 (12noon - 2pm) Final Assessment : Tuesday, 24 Nov, 2020 (5pm - 7pm) Practical Exam 1 : Saturday, 3 October, 2020 (9am - 12noon) Practical Exam 2 : Saturday, 7 November, 2020 (9am - 12noon) Assessment Weightage Programming Assignments : 30% Final Assessment : 25% Midterm Assessment : 10% Practical Exam 1 : 10% Practical Exam 2 : 15% Online Quizzes : 10%","title":"About CS1010"},{"location":"about.html#about-cs1010","text":"","title":"About CS1010"},{"location":"about.html#module-description","text":"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing. It is also the first part of a three-part series on introductory programming and problem solving by computing, which also includes CS2030 and CS2040. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for SoC students.","title":"Module Description"},{"location":"about.html#whowherewhen","text":"Instructor : Ooi Wei Tsang and Daren Ler Lecture Venue : Online ( Zoom link ) Lecture Time : Every Monday, 12noon - 2pm Q&A Hour via Zoom : Wei Tsang: Every Tuesday, 4pm - 5pm ( Zoom link ) Daren: Every Friday, 4pm - 5pm ( Zoom link ) Student Tutors : Aaron Ong Adi Nata Bennett Clement Chan Jun Hui Christopher Goh Zhen Fung Dao Ngoc Hieu David Livingstone Felix Halim Francisco Chensan Georgie Lee Hou Rui Hubertus Adhy Pratama Setiawan Justin Tzuriel Krisnahadi Jusuf Nathanael Khenus Tan Jia Liang Leah Roselyn James Liau Kai Jie Liu Zhuohao Muhammad Ahmed bin Anwar Bahajjaj Neil Banerjee Nicholas Teh Pang Jun Xian, Dylan Stefina Aryani Winoto Sun Yu Cheng Vasavada Tejas Wamika Malik Wang Zesong Xia Fuxi","title":"Who/Where/When"},{"location":"about.html#important-dates","text":"Midterm Assessment : Monday, 28 September, 2020 (12noon - 2pm) Final Assessment : Tuesday, 24 Nov, 2020 (5pm - 7pm) Practical Exam 1 : Saturday, 3 October, 2020 (9am - 12noon) Practical Exam 2 : Saturday, 7 November, 2020 (9am - 12noon)","title":"Important Dates"},{"location":"about.html#assessment-weightage","text":"Programming Assignments : 30% Final Assessment : 25% Midterm Assessment : 10% Practical Exam 1 : 10% Practical Exam 2 : 15% Online Quizzes : 10%","title":"Assessment Weightage"},{"location":"accounts.html","text":"CS1010 Accounts We will be using a variety of services for CS1010. To take CS1010, please make sure you have the following accounts: SoC UNIX Account You can get one here: https://mysoc.nus.edu.sg/~newacct/ This account allows you to access SoC UNIX resources, including the main computing host running Solaris, sunfire , and computer clusters running Ubuntu / CentOS. We will be using the compute clusters for CS1010. Make sure that \"General Unix Servers\" and \"The SoC Compute Cluster\" are enabled in MySoC here: https://mysoc.nus.edu.sg/~myacct/services.cgi GitHub Account CS1010 uses GitHub Classroom for programming assignment submissions and grading. You should register for a GitHub account if you do not have one. This account will likely stay with you for the rest of your computing career. So choose your username wisely. Piazza Account CS1010 uses Piazza for Q&A and discussion. You should have received an email to register for Piazza.","title":"Accounts"},{"location":"accounts.html#cs1010-accounts","text":"We will be using a variety of services for CS1010. To take CS1010, please make sure you have the following accounts:","title":"CS1010 Accounts"},{"location":"accounts.html#soc-unix-account","text":"You can get one here: https://mysoc.nus.edu.sg/~newacct/ This account allows you to access SoC UNIX resources, including the main computing host running Solaris, sunfire , and computer clusters running Ubuntu / CentOS. We will be using the compute clusters for CS1010. Make sure that \"General Unix Servers\" and \"The SoC Compute Cluster\" are enabled in MySoC here: https://mysoc.nus.edu.sg/~myacct/services.cgi","title":"SoC UNIX Account"},{"location":"accounts.html#github-account","text":"CS1010 uses GitHub Classroom for programming assignment submissions and grading. You should register for a GitHub account if you do not have one. This account will likely stay with you for the rest of your computing career. So choose your username wisely.","title":"GitHub Account"},{"location":"accounts.html#piazza-account","text":"CS1010 uses Piazza for Q&A and discussion. You should have received an email to register for Piazza.","title":"Piazza Account"},{"location":"clang.html","text":"CS1010 Compilation Guide 1. Compile a standalone C program Suppose we have a standalone C program teh.c that does not use any external libraries. We can compile the program using the command ooiwt@pe118:~$ clang teh.c This command should create an executable called a.out in the current directory, which you can then run with: ooiwt@pe118:~$ ./a.out 2. Renaming executable file The name a.out is an abbreviation for assembler output , a name that many compilers kept as the default output name since the 60s. We should, however, give our executable more descriptive name, by using the -o flag. ( o is the mnemonic for output). ooiwt@pe118:~$ clang teh.c -o teh or ooiwt@pe118:~$ clang -o teh teh.c The command above would create an executable called teh . Beware of the order If you are not careful and run the following command instead: ooiwt@pe118:~$ clang -o teh.c teh clang would overwrite your code teh.c -- all your hard work will be gone!! 3. Warning for possible bugs. The clang checks for syntax errors in your C files -- i.e., things that violate the C syntax rules. The compiler, however, is smart enough to identify possible bugs -- errors that will cause your program to behave incorrectly, even if the syntax follows C's rules. You can ask clang to warn you about this, using the -W flag ( W is the mnemonic for warning -- note the capital W). The manual for clang lists different types of warnings that clang can warn you about. For simplicity, we will ask clang to warn us about everything, by enabling all warnings. The command to do so is: ooiwt@pe118:~$ clang -Wall teh.c -o teh For beginners, it is highly recommended that you always compile with -Wall flag. 4. Generating additional information for debugging. In order to use the debugger lldb to trace through and debug your program, clang needs to generate additional information and store them in the executable file. We can instruct clang to generate them with the flag -g ( g for generate). ooiwt@pe118:~$ clang -Wall -g teh.c -o teh It is recommended that you always compile with -g flags during the development phase. If you need to measure the performance (e.g., how fast it runs) of your program or when you are releasing the program to the public, you can remove the -g flag and compile with the optimization flags (e.g., -O ) instead. 5. Linking with the standard library. To link with a standard library, we use the -l flag to specify the name of the library to link. For instance, to link with the C standard math library (abbreviated as m ), you issue the command: ooiwt@pe118:~$ clang -Wall -g teh.c -o teh -lm 6. Linking with 3rd party library By default, clang looks for headers and libraries in the systems directories ( /usr/include , /usr/lib , etc) and the current working directory. If you use a third-party library, you usually need to tell clang where to look for the corresponding headers and libraries. You can use the -I flag and the -L flag for these purposes. For instance, if you have a library installed under your home called citadel , and the file citadel.h can be found under ~/citadel/include and the file libcitadel.a can be found under ~/citadel/lib , to tell clang where to find these files, you can compile with: ooiwt@pe118:~$ clang -Wall -g -I ~/citadel/include -L ~/citadel/lib teh.c -o teh -lm -lcitadel","title":"CLang"},{"location":"clang.html#cs1010-compilation-guide","text":"","title":"CS1010 Compilation Guide"},{"location":"clang.html#1-compile-a-standalone-c-program","text":"Suppose we have a standalone C program teh.c that does not use any external libraries. We can compile the program using the command ooiwt@pe118:~$ clang teh.c This command should create an executable called a.out in the current directory, which you can then run with: ooiwt@pe118:~$ ./a.out","title":"1. Compile a standalone C program"},{"location":"clang.html#2-renaming-executable-file","text":"The name a.out is an abbreviation for assembler output , a name that many compilers kept as the default output name since the 60s. We should, however, give our executable more descriptive name, by using the -o flag. ( o is the mnemonic for output). ooiwt@pe118:~$ clang teh.c -o teh or ooiwt@pe118:~$ clang -o teh teh.c The command above would create an executable called teh . Beware of the order If you are not careful and run the following command instead: ooiwt@pe118:~$ clang -o teh.c teh clang would overwrite your code teh.c -- all your hard work will be gone!!","title":"2. Renaming executable file"},{"location":"clang.html#3-warning-for-possible-bugs","text":"The clang checks for syntax errors in your C files -- i.e., things that violate the C syntax rules. The compiler, however, is smart enough to identify possible bugs -- errors that will cause your program to behave incorrectly, even if the syntax follows C's rules. You can ask clang to warn you about this, using the -W flag ( W is the mnemonic for warning -- note the capital W). The manual for clang lists different types of warnings that clang can warn you about. For simplicity, we will ask clang to warn us about everything, by enabling all warnings. The command to do so is: ooiwt@pe118:~$ clang -Wall teh.c -o teh For beginners, it is highly recommended that you always compile with -Wall flag.","title":"3. Warning for possible bugs."},{"location":"clang.html#4-generating-additional-information-for-debugging","text":"In order to use the debugger lldb to trace through and debug your program, clang needs to generate additional information and store them in the executable file. We can instruct clang to generate them with the flag -g ( g for generate). ooiwt@pe118:~$ clang -Wall -g teh.c -o teh It is recommended that you always compile with -g flags during the development phase. If you need to measure the performance (e.g., how fast it runs) of your program or when you are releasing the program to the public, you can remove the -g flag and compile with the optimization flags (e.g., -O ) instead.","title":"4. Generating additional information for debugging."},{"location":"clang.html#5-linking-with-the-standard-library","text":"To link with a standard library, we use the -l flag to specify the name of the library to link. For instance, to link with the C standard math library (abbreviated as m ), you issue the command: ooiwt@pe118:~$ clang -Wall -g teh.c -o teh -lm","title":"5. Linking with the standard library."},{"location":"clang.html#6-linking-with-3rd-party-library","text":"By default, clang looks for headers and libraries in the systems directories ( /usr/include , /usr/lib , etc) and the current working directory. If you use a third-party library, you usually need to tell clang where to look for the corresponding headers and libraries. You can use the -I flag and the -L flag for these purposes. For instance, if you have a library installed under your home called citadel , and the file citadel.h can be found under ~/citadel/include and the file libcitadel.a can be found under ~/citadel/lib , to tell clang where to find these files, you can compile with: ooiwt@pe118:~$ clang -Wall -g -I ~/citadel/include -L ~/citadel/lib teh.c -o teh -lm -lcitadel","title":"6. Linking with 3rd party library"},{"location":"environments.html","text":"The CS1010 Programming Environment C is a common programming language and you can find different implementations of C compiler on many platforms. Wikipedia lists more than 40 different C compilers . These different compilers support different processor architecture, operating systems, may behave slightly differently, and may support different features of C standards. It is therefore important for CS1010 to stick to a single platform and single compiler. Our platform of choice is Ubuntu 18.04 (or later) using the clang compiler ( version 6.0 or later ). The school has provided a list of computing servers for you to use. You can access them remotely via ssh , or secure shell. The hosts are named pe111 , pe112 , ... , pe120 . ( pe stands for \"programming environment\"). We will refer to these servers generally as the PE hosts. pe115 and pe116 For this semester, the two servers pe115 and pe116 are not available. You can choose which of the 10 8 hosts to use. You share the same home directory across all the hosts (this home directory, however, is different from that of sunfire ). For simplicity, the following guide uses pe111 in all examples. Do keep in mind that you can use other hosts for CS1010 to spread out the load. While it is possible for you to complete the programming assignments on your own computers, the practical exams are done in a controlled environment using servers similar to the PE hosts. It is therefore advisable for you to familiarize yourself with accessing the PE servers via ssh and edit your program with either vim . Basic Requirements You need to have an SoC UNIX account. If you do not have one, you can apply for one online . Once you have an account, you need to activate your access to the PE hosts , which is part of the SoC computer clusters. You need an ssh client. macOS and Linux users should already have it installed by default. Windows 10 users should install the Windows Subsystem for Linux and use Linux. For older versions of Windows, such as those used in the SoC's programming labs, you can check out XShell 6 (free for home/school use), or PuTTY . These are GUI-based programs so the command lines instructions below do not apply. The Command to SSH Run: ssh <username>@pe111.comp.nus.edu.sg Replace <username> with your SoC UNIX username, for instance, I would do: ssh ooiwt@pe111.comp.nus.edu.sg After the command above, following the instructions on the screen. The first time you ever connect to pe111.comp.nus.edu.sg , you will be warned that you are connecting to a previously unknown host. Say yes , and you will be prompted with your SoC UNIX password. Accessing The PE Hosts from Outside SoC The PE hosts can only be accessed from within the School of Computing networks. If you want to access it from outside, there are several ways. Option 1: Using SoC VPN One way is to set up a Virtual Private Network (VPN) (See instruction here ). The staff at helpdesk@comp.nus.edu.sg or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed. SoC VPN vs NUS VPN Note that SoC VPN is different from NUS VPN. Connecting to NUS VPN only allows you access to the NUS internal network, but not the SoC internal network. Windows 10 Users: FortiClient from Windows Store Students have reported that running FortiClient downloaded from the Windows Store does not allow one to ssh from WSL to sunfire as expected. Therefore, you should download and install For Windows 10 users, please download and install FortiClient VPN directly from FortiClient's website . Option 2: Tunneling through Sunfire The alternative is to use ssh tunnels. SoC's Sunfire ( sunfire.comp.nus.edu.sg ) is configured to allow your connection if it's originating from a local telco. (See more details here .) Since sunfire is situated within the School of Computing network, sunfire is able to access the PE hosts. This opens the possibility of connecting from your device (using an Internet connection from a local telco) to sunfire , and then from sunfire to the PE servers. There are two ways to achieve this, and in both ways, it appears to the PE hosts that Sunfire is the client. SSH through sunfire Connect to sunfire at sunfire.comp.nus.edu.sg via command line ssh with the option -t . ssh -t sunfire.comp.nus.edu.sg ssh pe111.comp.nus.edu.sg Alternatively: ssh pe111.comp.nus.edu.sg -J sunfire.comp.nus.edu.sg SSH Port Forwarding SSH has built-in support for local and remote port forwarding, and local port forwarding can be used to connect to the programming environments. Local port forwarding means that a port of the SSH client (your machine) is forwarded to the SSH server ( sunfire ), which opens a connection to a preset destination server (e.g., pe111 ). This method causes the host to seem as if it is hosted on a local port, e.g. localhost:7000 , allowing you to use your favorite SCP program (e.g. FileZilla ) to access the PE host. To use local port forwarding (from local port 7000 ), connect to sunfire using ssh -L 7000:pe111.comp.nus.edu.sg:22 <username>@sunfire.comp.nus.edu.sg This command opens an SSH tunnel from port 7000 of your machine to port 22 (the default SSH port) of pe111.comp.nus.edu.sg via sunfire . After successful login, open a separate SSH (or SCP) connection from your machine to localhost at port 7000 to access the PE host: ssh <username>@localhost -p 7000 PuTTY supports SSH port forwarding, so this setup can also be used on Windows. Setting up SSH Keys Once you are comfortable with UNIX, you can set up a pair of public/private keys for authentication. You can use ssh-keygen -t rsa to generate a pair of keys on your local computer. Keep the private key id_rsa on your local machine in the hidden ~/.ssh directory, and copy the public key id_rsa.pub to your home directory on PE pe111 . On pe111 , run cat id_rsa.pub >> ~/.ssh/authorized_keys Make sure that the permission for .ssh both on the local machine and on PE are set to 700 and the files id_rsa on the local machine and authorized_keys on the remote machine are set to 600 . Once set up, you need not enter your password every time you run ssh or scp .","title":"Programming Environments"},{"location":"environments.html#the-cs1010-programming-environment","text":"C is a common programming language and you can find different implementations of C compiler on many platforms. Wikipedia lists more than 40 different C compilers . These different compilers support different processor architecture, operating systems, may behave slightly differently, and may support different features of C standards. It is therefore important for CS1010 to stick to a single platform and single compiler. Our platform of choice is Ubuntu 18.04 (or later) using the clang compiler ( version 6.0 or later ). The school has provided a list of computing servers for you to use. You can access them remotely via ssh , or secure shell. The hosts are named pe111 , pe112 , ... , pe120 . ( pe stands for \"programming environment\"). We will refer to these servers generally as the PE hosts. pe115 and pe116 For this semester, the two servers pe115 and pe116 are not available. You can choose which of the 10 8 hosts to use. You share the same home directory across all the hosts (this home directory, however, is different from that of sunfire ). For simplicity, the following guide uses pe111 in all examples. Do keep in mind that you can use other hosts for CS1010 to spread out the load. While it is possible for you to complete the programming assignments on your own computers, the practical exams are done in a controlled environment using servers similar to the PE hosts. It is therefore advisable for you to familiarize yourself with accessing the PE servers via ssh and edit your program with either vim .","title":"The CS1010 Programming Environment"},{"location":"environments.html#basic-requirements","text":"You need to have an SoC UNIX account. If you do not have one, you can apply for one online . Once you have an account, you need to activate your access to the PE hosts , which is part of the SoC computer clusters. You need an ssh client. macOS and Linux users should already have it installed by default. Windows 10 users should install the Windows Subsystem for Linux and use Linux. For older versions of Windows, such as those used in the SoC's programming labs, you can check out XShell 6 (free for home/school use), or PuTTY . These are GUI-based programs so the command lines instructions below do not apply.","title":"Basic Requirements"},{"location":"environments.html#the-command-to-ssh","text":"Run: ssh <username>@pe111.comp.nus.edu.sg Replace <username> with your SoC UNIX username, for instance, I would do: ssh ooiwt@pe111.comp.nus.edu.sg After the command above, following the instructions on the screen. The first time you ever connect to pe111.comp.nus.edu.sg , you will be warned that you are connecting to a previously unknown host. Say yes , and you will be prompted with your SoC UNIX password.","title":"The Command to SSH"},{"location":"environments.html#accessing-the-pe-hosts-from-outside-soc","text":"The PE hosts can only be accessed from within the School of Computing networks. If you want to access it from outside, there are several ways.","title":"Accessing The PE Hosts from Outside SoC"},{"location":"environments.html#option-1-using-soc-vpn","text":"One way is to set up a Virtual Private Network (VPN) (See instruction here ). The staff at helpdesk@comp.nus.edu.sg or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed. SoC VPN vs NUS VPN Note that SoC VPN is different from NUS VPN. Connecting to NUS VPN only allows you access to the NUS internal network, but not the SoC internal network. Windows 10 Users: FortiClient from Windows Store Students have reported that running FortiClient downloaded from the Windows Store does not allow one to ssh from WSL to sunfire as expected. Therefore, you should download and install For Windows 10 users, please download and install FortiClient VPN directly from FortiClient's website .","title":"Option 1: Using SoC VPN"},{"location":"environments.html#option-2-tunneling-through-sunfire","text":"The alternative is to use ssh tunnels. SoC's Sunfire ( sunfire.comp.nus.edu.sg ) is configured to allow your connection if it's originating from a local telco. (See more details here .) Since sunfire is situated within the School of Computing network, sunfire is able to access the PE hosts. This opens the possibility of connecting from your device (using an Internet connection from a local telco) to sunfire , and then from sunfire to the PE servers. There are two ways to achieve this, and in both ways, it appears to the PE hosts that Sunfire is the client.","title":"Option 2: Tunneling through Sunfire"},{"location":"environments.html#ssh-through-sunfire","text":"Connect to sunfire at sunfire.comp.nus.edu.sg via command line ssh with the option -t . ssh -t sunfire.comp.nus.edu.sg ssh pe111.comp.nus.edu.sg Alternatively: ssh pe111.comp.nus.edu.sg -J sunfire.comp.nus.edu.sg","title":"SSH through sunfire"},{"location":"environments.html#ssh-port-forwarding","text":"SSH has built-in support for local and remote port forwarding, and local port forwarding can be used to connect to the programming environments. Local port forwarding means that a port of the SSH client (your machine) is forwarded to the SSH server ( sunfire ), which opens a connection to a preset destination server (e.g., pe111 ). This method causes the host to seem as if it is hosted on a local port, e.g. localhost:7000 , allowing you to use your favorite SCP program (e.g. FileZilla ) to access the PE host. To use local port forwarding (from local port 7000 ), connect to sunfire using ssh -L 7000:pe111.comp.nus.edu.sg:22 <username>@sunfire.comp.nus.edu.sg This command opens an SSH tunnel from port 7000 of your machine to port 22 (the default SSH port) of pe111.comp.nus.edu.sg via sunfire . After successful login, open a separate SSH (or SCP) connection from your machine to localhost at port 7000 to access the PE host: ssh <username>@localhost -p 7000 PuTTY supports SSH port forwarding, so this setup can also be used on Windows.","title":"SSH Port Forwarding"},{"location":"environments.html#setting-up-ssh-keys","text":"Once you are comfortable with UNIX, you can set up a pair of public/private keys for authentication. You can use ssh-keygen -t rsa to generate a pair of keys on your local computer. Keep the private key id_rsa on your local machine in the hidden ~/.ssh directory, and copy the public key id_rsa.pub to your home directory on PE pe111 . On pe111 , run cat id_rsa.pub >> ~/.ssh/authorized_keys Make sure that the permission for .ssh both on the local machine and on PE are set to 700 and the files id_rsa on the local machine and authorized_keys on the remote machine are set to 600 . Once set up, you need not enter your password every time you run ssh or scp .","title":"Setting up SSH Keys"},{"location":"outcomes.html","text":"After taking CS1010, students should be familiar with fundamental programming concepts and methodology (variables, assignments, conditions, branches, loops, functions, recursions, structures); be familiar with and appreciate good programming practice, and apply it to follow-up courses; be able to apply problem-solving knowledge and skills to write small, well-documented, effective C programs; be able to appreciate the use of simple data structure such as array, know their limitations to pave way for more complex data structures in the next course; know the responsibilities of an ethical programmer; be able to write simple programs in the corresponding programming language to solve a task, given the constraints on the inputs; be able to manually trace through a program to identify logical errors; be able to differentiate between logical errors, syntax errors, and run-time errors; be exposed informally to the concept of code specification in the form of comments in the code, explaining what are the expected inputs and outputs and what are the assumptions; know about what are some insecure functions to avoid; be able to generate test cases on their own, with a focus on boundary/special cases; be able to debug with printf or equivalent functions; be aware of common strategies and good practices of debugging with printf or equivalent functions; be able to identify opportunities to, and write, modularized code; be exposed to a debugger; be able to write code following good programming style (clear comments, naming convention, indentation, etc.); understand the different data types and that there exists a representation of each in the memory, as well as the limitation of the representations due to the limited number of bits; develop a simple mental model of how a program is executed (CPU runs the code on data that is stored in memory, function call leads to the creation of call frames, which can explain recursion and variable scoping, etc). For interpreted language, understand the role of virtual machine/interpreter; be able to understand at a high level the compilation process (from pre-processing to compiling to linking), where applicable; understand the concept of reusability and how a software application can be built on top of software libraries/packages (standard or third parties); be able to implement bubble sort and insertion sort; be able to implement linear search and binary search (both iterative and recursive versions);","title":"Learning Outcomes"},{"location":"policies.html","text":"Policies Email Communication Please use only your official NUS email for communication with the teaching staff -- either the one with @u.nus.edu or @comp.nus.edu.sg . Please use email only for private matters. Prefix your email subject with [CS1010] . Please use Piazza for other matters related to the module. If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate. Lab Sessions Attendance is not compulsory at NUS, but we do take attendance during the tutorial sessions. You should stick to your allocated time slot for tutorials. If there is a strong reason for you to attend another tutorial session, please inform your tutor. Late Submissions All programming assignments must be submitted on time. If you need an extension, please ask for one and provide a justification for approval. Only academic reasons and compassionate reasons can be considered (e.g., representing NUS for a sports event is OK; Attending a wedding is not). For late submission, there is a 1% penalty (of the total assessment grade) for every 5-minutes after the deadline, capped at 80%. For example, if an assessment that was given 40 marks was submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty). If it is submitted 10 hours after the deadline, the student will get 8 marks (as the cap of 80% penalty has been reached). Discussions and Plagiarism We encourage discussions among students for programming assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate. NUS and School of Computing have a high standard of academic honesty and take any violation seriously. In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a serious violation. Please read the page Preventing Plagiarism from the school's website to familiarize yourself with the policy. I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism. Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally. Screencast Screencast will be recorded and posted online 3-4 days after the lecture. This will be done on a 'best effort' basis and screencast will not be guaranteed to be available on time or at all. Posting of screencast is meant to help students who attended the lecture to recap the content or to help those who are not able to attend the lecture due to unexpected circumstances. It does not mean that you should skip the lecture. Research has shown that the effect of over-reliance on screencast is negative. Model Solutions and Slides Slides will be posted after the class. Note that slides are used as a visual aid to assist me during the lectures. It is not meant as a summary of lectures nor a replacement of lecture notes. In a module like CS1010, there is often not a single correct answer. Hence, there is no model solution for this module. Sample solutions may be posted (both good and bad ones) for discussion. I strongly encourage students to discuss your solution with the teaching team, instead of just comparing your solution with the sample solution. Grading Students will receive the grades they deserve irrespective of how the other students in the class perform (i.e., no bell curve). In other words, the number of As and Fs will not be artificially capped. Open Book Assessment All assessment, including practical exams, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other analog reference materials. There is nothing to memorize for this class.","title":"Policies"},{"location":"policies.html#policies","text":"","title":"Policies"},{"location":"policies.html#email-communication","text":"Please use only your official NUS email for communication with the teaching staff -- either the one with @u.nus.edu or @comp.nus.edu.sg . Please use email only for private matters. Prefix your email subject with [CS1010] . Please use Piazza for other matters related to the module. If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.","title":"Email Communication"},{"location":"policies.html#lab-sessions","text":"Attendance is not compulsory at NUS, but we do take attendance during the tutorial sessions. You should stick to your allocated time slot for tutorials. If there is a strong reason for you to attend another tutorial session, please inform your tutor.","title":"Lab Sessions"},{"location":"policies.html#late-submissions","text":"All programming assignments must be submitted on time. If you need an extension, please ask for one and provide a justification for approval. Only academic reasons and compassionate reasons can be considered (e.g., representing NUS for a sports event is OK; Attending a wedding is not). For late submission, there is a 1% penalty (of the total assessment grade) for every 5-minutes after the deadline, capped at 80%. For example, if an assessment that was given 40 marks was submitted 100 minutes after the deadline, the student will get 32 marks instead (20% penalty). If it is submitted 10 hours after the deadline, the student will get 8 marks (as the cap of 80% penalty has been reached).","title":"Late Submissions"},{"location":"policies.html#discussions-and-plagiarism","text":"We encourage discussions among students for programming assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate. NUS and School of Computing have a high standard of academic honesty and take any violation seriously. In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a serious violation. Please read the page Preventing Plagiarism from the school's website to familiarize yourself with the policy. I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism. Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.","title":"Discussions and Plagiarism"},{"location":"policies.html#screencast","text":"Screencast will be recorded and posted online 3-4 days after the lecture. This will be done on a 'best effort' basis and screencast will not be guaranteed to be available on time or at all. Posting of screencast is meant to help students who attended the lecture to recap the content or to help those who are not able to attend the lecture due to unexpected circumstances. It does not mean that you should skip the lecture. Research has shown that the effect of over-reliance on screencast is negative.","title":"Screencast"},{"location":"policies.html#model-solutions-and-slides","text":"Slides will be posted after the class. Note that slides are used as a visual aid to assist me during the lectures. It is not meant as a summary of lectures nor a replacement of lecture notes. In a module like CS1010, there is often not a single correct answer. Hence, there is no model solution for this module. Sample solutions may be posted (both good and bad ones) for discussion. I strongly encourage students to discuss your solution with the teaching team, instead of just comparing your solution with the sample solution.","title":"Model Solutions and Slides"},{"location":"policies.html#grading","text":"Students will receive the grades they deserve irrespective of how the other students in the class perform (i.e., no bell curve). In other words, the number of As and Fs will not be artificially capped.","title":"Grading"},{"location":"policies.html#open-book-assessment","text":"All assessment, including practical exams, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other analog reference materials. There is nothing to memorize for this class.","title":"Open Book Assessment"},{"location":"readings.html","text":"Readings Must Read How NOT to Go About a Programming Assignment , by Agustin Cernuda del Rio. Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again).. Best Teacher I Ever Had , by David Owen. Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, .. Why C? Learn C programming and the rest will come, by Marty Jacobs The Resurgence of C Programming, by Mark Barlow You Can't Dig Upwards, by Evan Miller Vim Time to Drop Emacs and Vi? on StackOverflow. \" Programmers are notorious for using the tools that helps them get the job done in the most efficient way possible. These editors are ancient yet still being used because they are good, solid editors, proven by time. If they get the job done and get the job done well, why should we drop them in favor of something else? \" What are the benefits of learning Vim? on Stack Overflow. \" Usually vim's killer features are considered: A) that it's available on pretty much every Unix you'll ever encounter and B) your fingers very rarely have to leave the home row, which means you'll be able to edit text very, very quickly. It's also usually very fast and lightweight even when editing huge files. \" Learn vim Progressively \" I suggest you teach yourself Vim in 4 steps: 1. Survive. 2. Feel comfortable. 3. Feel Better, Stronger, Faster. 4. Use superpowers of vim \" Where Vim Came From -- from TwoBitHistory. \" Perhaps more importantly, while we\u2019re asking questions, why does exiting Vim involve typing :wq? Sure, it\u2019s a \u201cwrite\u201d operation followed by a \u201cquit\u201d operation, but that is not a particularly intuitive convention. Who decided that copying text should instead be called \u201cyanking\u201d? Why is :%s/foo/bar/gc short for \u201cfind and replace\u201d? Vim\u2019s idiosyncrasies seem too arbitrary to have been made up, but then where did they come from?\" Vim's Big Idea - by Mike Kozlowski. \"This philosophy of minimalist commands that can be composed together is the fundamental originating philosophy of Unix, and Vim exemplifies it like no other editor.\" VIM Pays Excellent Dividends - by John Bjorn Nelson. \"Being conservative, let\u2019s say it makes you 5% more productive. More specifically\u200a\u2014\u200aonce your brain maps the keystrokes to muscle memory\u200a\u2014\u200ait makes you 5% faster at completing the mundane tasks\u2026the ones which dominate programming. That added productivity snowballs. It\u2019s an extra twenty minutes a day to build or explore (or learn), that used to go to copy/paste-like operations.\" The Powers of VIM - by Artem Dudarev The 11 Steps to Learning Vim - by damassi . \"Regardless of the initial confusion and difficulty in getting started, you're making your future developer self immensely more productive by diving in and taking the plunge. Seriously. I'm just a few weeks in right now and I can positively say that learning Vim has been the best work-related decision of my life. It's fun, and in the strangest of ways it makes you think better.\" Vim for People Who Think Things like Vim and Weird and Hard - by Harry Roberts . \"the fact that, yes, people still use an editor that is over 20 years old (in turn based on a tool from the 70s), and those people number in the hundreds of thousands, perhaps they might be onto something.\" Why I use Vim - Pascal Precht. \"_once I was able to do some basic operations in Vim and actually started working again, I made almost as twice as much progress at work in about half the time. I know that sounds kind of crazy but I\u2019m serious. And that convinced me that I made the right choice. So, do yourself a favor and climb that mountain. Just remember that you can slide down afterwards._\" Vim Video Tutorial (from Aaron Tan) Lesson 1 Lesson 2 Lesson 3 Lesson 4","title":"Readings"},{"location":"readings.html#readings","text":"","title":"Readings"},{"location":"readings.html#must-read","text":"How NOT to Go About a Programming Assignment , by Agustin Cernuda del Rio. Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again).. Best Teacher I Ever Had , by David Owen. Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..","title":"Must Read"},{"location":"readings.html#why-c","text":"Learn C programming and the rest will come, by Marty Jacobs The Resurgence of C Programming, by Mark Barlow You Can't Dig Upwards, by Evan Miller","title":"Why C?"},{"location":"readings.html#vim","text":"Time to Drop Emacs and Vi? on StackOverflow. \" Programmers are notorious for using the tools that helps them get the job done in the most efficient way possible. These editors are ancient yet still being used because they are good, solid editors, proven by time. If they get the job done and get the job done well, why should we drop them in favor of something else? \" What are the benefits of learning Vim? on Stack Overflow. \" Usually vim's killer features are considered: A) that it's available on pretty much every Unix you'll ever encounter and B) your fingers very rarely have to leave the home row, which means you'll be able to edit text very, very quickly. It's also usually very fast and lightweight even when editing huge files. \" Learn vim Progressively \" I suggest you teach yourself Vim in 4 steps: 1. Survive. 2. Feel comfortable. 3. Feel Better, Stronger, Faster. 4. Use superpowers of vim \" Where Vim Came From -- from TwoBitHistory. \" Perhaps more importantly, while we\u2019re asking questions, why does exiting Vim involve typing :wq? Sure, it\u2019s a \u201cwrite\u201d operation followed by a \u201cquit\u201d operation, but that is not a particularly intuitive convention. Who decided that copying text should instead be called \u201cyanking\u201d? Why is :%s/foo/bar/gc short for \u201cfind and replace\u201d? Vim\u2019s idiosyncrasies seem too arbitrary to have been made up, but then where did they come from?\" Vim's Big Idea - by Mike Kozlowski. \"This philosophy of minimalist commands that can be composed together is the fundamental originating philosophy of Unix, and Vim exemplifies it like no other editor.\" VIM Pays Excellent Dividends - by John Bjorn Nelson. \"Being conservative, let\u2019s say it makes you 5% more productive. More specifically\u200a\u2014\u200aonce your brain maps the keystrokes to muscle memory\u200a\u2014\u200ait makes you 5% faster at completing the mundane tasks\u2026the ones which dominate programming. That added productivity snowballs. It\u2019s an extra twenty minutes a day to build or explore (or learn), that used to go to copy/paste-like operations.\" The Powers of VIM - by Artem Dudarev The 11 Steps to Learning Vim - by damassi . \"Regardless of the initial confusion and difficulty in getting started, you're making your future developer self immensely more productive by diving in and taking the plunge. Seriously. I'm just a few weeks in right now and I can positively say that learning Vim has been the best work-related decision of my life. It's fun, and in the strangest of ways it makes you think better.\" Vim for People Who Think Things like Vim and Weird and Hard - by Harry Roberts . \"the fact that, yes, people still use an editor that is over 20 years old (in turn based on a tool from the 70s), and those people number in the hundreds of thousands, perhaps they might be onto something.\" Why I use Vim - Pascal Precht. \"_once I was able to do some basic operations in Vim and actually started working again, I made almost as twice as much progress at work in about half the time. I know that sounds kind of crazy but I\u2019m serious. And that convinced me that I made the right choice. So, do yourself a favor and climb that mountain. Just remember that you can slide down afterwards._\"","title":"Vim"},{"location":"readings.html#vim-video-tutorial-from-aaron-tan","text":"Lesson 1 Lesson 2 Lesson 3 Lesson 4","title":"Vim Video Tutorial (from Aaron Tan)"},{"location":"schedule.html","text":"Schedule This is the schedule for CS1010. Note: Assignments are released on Thursday and due the following Monday 23:59. Catch-up sessions are optional review + Q&A sessions meant for students who need time to recap and catch up. They are held on Saturday morning 10 am to 12noon Practical exams are held on Saturday morning from 9 am to 12noon The topics covered are tentative. Week Starting.. Topics Assignment Catch Up Session 1 2020-08-10 Computational Problem Solving 2 2020-08-17 Functions & Types 3 2020-08-24 Basic C programs CU1 4 2020-08-31 Conditionals AS1 5 2020-09-07 Loops AS2 6 2020-09-14 Memory, Array, Strings AS3 CU2 - 2020-09-21 Break 7 2020-09-28 Midterm PE1 AS4 8 2020-10-05 Call-by-Referece, nD-Array AS5 9 2020-10-12 Efficiency, Macro AS6 10 2020-10-19 Searching and Sorting AS7 CU3 11 2020-10-26 More recursion AS8 12 2020-11-02 Struct and I/O PE2 AS9 13 2020-11-09 Recap CU4","title":"Schedule"},{"location":"schedule.html#schedule","text":"This is the schedule for CS1010. Note: Assignments are released on Thursday and due the following Monday 23:59. Catch-up sessions are optional review + Q&A sessions meant for students who need time to recap and catch up. They are held on Saturday morning 10 am to 12noon Practical exams are held on Saturday morning from 9 am to 12noon The topics covered are tentative. Week Starting.. Topics Assignment Catch Up Session 1 2020-08-10 Computational Problem Solving 2 2020-08-17 Functions & Types 3 2020-08-24 Basic C programs CU1 4 2020-08-31 Conditionals AS1 5 2020-09-07 Loops AS2 6 2020-09-14 Memory, Array, Strings AS3 CU2 - 2020-09-21 Break 7 2020-09-28 Midterm PE1 AS4 8 2020-10-05 Call-by-Referece, nD-Array AS5 9 2020-10-12 Efficiency, Macro AS6 10 2020-10-19 Searching and Sorting AS7 CU3 11 2020-10-26 More recursion AS8 12 2020-11-02 Struct and I/O PE2 AS9 13 2020-11-09 Recap CU4","title":"Schedule"},{"location":"unix.html","text":"Basic UNIX Commands UNIX-based operating systems provide a command line to interact with the system: to create directories, to manipulate files, to run certain applications. While these tasks can be done through a GUI interface, a command line is still useful because (i) it provides a simple way to interact with a remote system (only text are exchanged between the local and remote hosts instead of graphics); (ii) it is extremely flexible and provides many customization options; (iii) you can easily automate the sequence of commands to issue for repetitive tasks; and (iv) it is faster. Connect to the Programming Environment (PE) If you would like to follow the following examples, you should first ssh into one of the PE hosts provided. We will use pe111 in the following example. But feel free to use pe112 up to pe120 for your practice. You should read this guide to see how to access and connect to the environment. Once you are connected, you should see a prompt like this. ooiwt@pe111:~$ This interface is provided by a UNIX bash -- this shell sits in a loop and waits for users to enter a command, then it interprets and executes the command. There are many versions of shells, the default shell for our PE is bash 1 . The following is adapted for CS1010 from the instructions created by Aaron Tan . Bugs are mine. The power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive . All commands are to be entered after the UNIX prompt of the form ooiwt@pe111:~$ ~ indicates that you are currently in your home directory. The following examples assume that user ooiwt is logged into pe111 . It might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below: Each user has his/her own home directory, which is where he/she will be automatically placed when he/she logs in to the system. The above figure shows where the home directory of the user ooiwt resides in the directory tree. The user ooiwt may create files or directories in his/her home directory, but not elsewhere unless permission is given. pwd : Print Current Working directory pwd shows you which directory you are currently in ooiwt@pe111:~$ pwd /home/o/ooiwt UNIX uses forward slash / to deliminate different parts of the directory structure. This is the same notation as URLs so you should already be familiar with it. ls : LiSt files The ls list the files in the current working directory. ooiwt@pe111:~$ ls ooiwt@pe111:~$ If you do not have any regular files in your home directory, as you should when you first log in, you should immediately return to the bash prompt. Rule of Silence UNIX follows the rule of silence : programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program. So, if ls has nothing to list, it will list nothing (as opposed to, say, printing \"This is an empty directory.\") mkdir : MaKe a subDIRectory The mkdir command creates a subdirectory with the given name in the current directory. ooiwt@pe111:~$ mkdir tut01 ooiwt@pe111:~$ ls tut01 ooiwt@pe111:~$ ls -F tut01/ Here, you create a directory called tut01 . Now, when you ls , you can see the directory listed. You may also use ls -F for more information ( -F is one of the many options / flags available for the ls command. To see a complete list of the options, refer to the man pages, i.e., man ls .) The slash / beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used. You may also use the ls -l command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification. Use Ctrl + P for Command History Unix maintains a history of your previously executed UNIX commands, and you may use Ctrl + P and Ctrl + N to go through it. Press the Ctrl + P until you find a previously executed UNIX command. You may then press Enter to execute it or edit the command before executing it. This is handy when you need to repeatedly execute a long UNIX command. cd : Change Directory To navigate in the directory tree, changing the current working directory from to another, we use the cd command. ooiwt@pe111:~$ cd tut01 ooiwt@pe111:~/tut01$ Note that the prompt changes to ~/tut01 to indicate that you are now in the tut01 directory below your HOME directory. Entering cd alone brings you back to your HOME directory, i.e., the directory in which you started with when you first logged into the system. ooiwt@pe111:~/tut01$ cd ooiwt@pe111:~$ Two dots .. refers to the parent directory. So, alternatively, for the case above, since we are only one level down from the HOME , to return home, we can alternatively use cd .. . ooiwt@pe111:~/tut01$ cd .. ooiwt@pe111:~$ rmdir : ReMove a subDIRectory rmdir removes a subDIRectory in current directory -- note that a directory must be empty before it can be removed. ooiwt@pe111:~$ rmdir tut01 ooiwt@pe111:~$ ls -F ooiwt@pe111:~$ mkdir tut01 ooiwt@pe111:~$ ls -F tut01/ cp : CoPy files ooiwt@pe111:~/tut01$ cp ~cs1010/tut01/hello.c . ooiwt@pe111:~/tut01$ ls hello.c The command above copies the file hello.c from the HOME of user cs1010 , under directory tut01 , to the current directory. If you want to copy the whole directory, use -r flag, where r stands for recursive copy. ooiwt@pe111:~/tut01$ cp -r ~cs1010/tut01 . In the last command above, the single . refers to the current directory. The directory tut01 and everything under it will be copied to the current directory. mv : MoVe or rename files mv can move files from one directory to another. ooiwt@pe111:~/tut01$ ls hello.c ooiwt@pe111:~/tut01$ mv hello.c .. ooiwt@pe111:~/tut01$ ls ooiwt@pe111:~/tut01$ ls .. hello.c ooiwt@pe111:~/tut01$ mv ../hello.c . Here, we tell mv to copy a file hello.c from the parent directory to the current directory. mv can also be used to rename files. ooiwt@pe111:~/tut01$ mv hello.c hello_world.c ooiwt@pe111:~/tut01$ ls hello_world.c Use TAB for Name Completion If you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type: ooiwt@pe111:~/tut01$ mv h and press the Tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"h\". Otherwise, it will fill up the filename to the point where you need to type in more characters for disambiguation. The Tab key can also complete the name of a command. rm : ReMove files Be careful with this command -- files deleted cannot be restored. There is no trash or recycled bin like in Mac or Windows. ooiwt@pe111:~/tut01$ rm hello.c ooiwt@pe111:~/tut01$ ls ooiwt@pe111:~/tut01$ rm -rf * While Unix command line provides lots of flexibility and power, with great power comes great responsibility. Some of the commands are extremely dangerous. rm -rf * is the most famous one. The notation * refers to all files, and the flag -f means forceful deletion (no question asked!), and -r means remove recursively everything under the current directory tree. Accidentally running this command has ruined many files. Read more here rm comes with a -i flag that interactively asks you if you are sure if you want to delete a file. It is a good idea to always run rm -i . On pe111 , we have configured everyone's account so that rm is aliased to rm -i by default. So when you run rm hello.c , it actually runs rm -i hello.c . ooiwt@pe111:~/tut01$ rm hello.c rm: remove regular file 'hello.c' ? Type y or n to answer yes or no respectively. If you set up your own UNIX OS, you should add this alias alias rm = \"rm -i\" to your .bashrc (Google to find out how). Other useful aliases to avoid accidentally overwriting existing files are: alias mv = \"mv -i\" alias cp = \"cp -i\" cat : CATenate file content to the screen ooiwt@pe111:~/tut01$ cat hello.c less is variant of cat that includes features to read each page leisurely) ooiwt@pe111:~/tut01$ less hello.c In less , use <space> to move down one page, b to move Back up one page, and q to Quit. man : Online MANual An online help facility is available in UNIX via the man command ( man stands for MANual). To look for more information about any UNIX command, for example, ls , type man ls . Type man man and refer to Man Pages to find out more about the facility. To exit man , press q . Now that you are familiar with how the UNIX bash works, I won't show the command prompt any more in the rest of this article. chmod : Changing UNIX File Permission It is important to guide our files properly on a multi-user system where users share the same file system. UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read ( r ), write ( w ), and execute ( x ), for four classes of users, the user who owns of the file ( u ), users in the same group as the owner ( g ), all other users ( o ), and all users ( a ) (union of all three classes before) When you run ls -l , you will see the permission encoded as strings that look like -rw------- or drwx--x--x besides other file information. The first character indicates if the file is a directory ( d ) or not ( - ). The next three characters are the permission for the owner. rwx means that the owner can do all three: reading, writing, and executing, rw- means that the owner can read and write, but cannot execute. The next three characters are the permission for the users in the same group. The last three characters are the permission for the users in the other groups. To change permission, we use the chmod command. Let's say that we want to remove the read and write permission from all other users in the group. You can run: chmod g-rw <file> where <file> is the name of the file whose permission you want to change. This would change the permission from -rw-rw-rw- to -rw----rw- , or from -rwxr--r-- to -rwx---r-- . To add executable permission to everyone, you can run: chmod a+x <file> This would change the permission from -rw-rw-rw- to -rwxrwxrwx , or from -rwxr--r-- to rwxr-xr-x , and so on. You get the idea. Another way to change the permission is to set the permission directly, instead of adding with + and removing with - . To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7. So, rwx is 7, rw- is 6, -w- is 2, --- is 0, etc. To set the permission of a file to -r--r--r-- (readable by everyone), run: chmod 444 <file> To set the permission to -rw------- , run: chmod 600 <file> and so on. It is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises. scp : Secure Copy Secure copy, or scp , is one way to transfer files from the programming environments to your local computer for archiving or storage. Let's say you want to transfer a set of C files from the directory a01 to your local computer, then, on your local computer, run: ooiwt@macbook:~$ scp ooiwt@pe111:~/a01/*.c . Warning If you have files with the same name in the remote directory, the files will be overwritten without warning. I have lost my code a few times due to scp . The expression *.c is a regular expression that means all files with filename ending with .c . You can copy specific files as well. For instance, ooiwt@macbook:~$ scp ooiwt@pe111:~/a01/hello.c . scp supports -r (recursive copy) as well. Specifying A Path in UNIX In any command above, when we need to refer to a directory or a file, we need to specify an unambiguous location of the directory or the file. The most precise way to specify the location is to use the full path, or the absolute path . For instance: cp /home/o/ooiwt/tut01/hello.c /home/o/ooiwt/tut01/hello_world.c That's a lot of characters to type. We could shorten it in a few ways. We could specify the location with respect to the home directory using ~ . ~ooiwt refers to the home directory of user ooiwt . cp ~ooiwt/tut01/hello.c ~ooiwt/tut01/hello_world.c If you are ooiwt , then you can omit ooiwt , since ~ without any username refers to your home directory. cp ~/tut01/hello.c ~/tut01/hello_world.c Or we could specify the location with respect to the current directory. Suppose the current working directory is ~/tut01 (i.e., we have cd into ~/tut01 ), then we could say this: cp ./hello.c ./hello_world.c Recall that a single dot . refers to the current directory. The ./ however is redundant unless you are executing a command. Since, by specifying a file name or a directory without a path (i.e., not using any / ), the bash looks for the file or directory in the current directory. So, we could just do: cp hello.c hello_world.c Another important short form for relative location is .. . Recall that this refers to the parent directory. Suppose that the current directory is in ~/tut02 . Then, to copy the files in ~/tut01 , you can run: cp ../tut01/hello.c ../tut01/hello_world.c I run fish on my macOS, as you might have noticed during the in-class demos. You can use any shell you like if you know what you are doing. Otherwise, bash is a popular one. \u21a9","title":"UNIX"},{"location":"unix.html#basic-unix-commands","text":"UNIX-based operating systems provide a command line to interact with the system: to create directories, to manipulate files, to run certain applications. While these tasks can be done through a GUI interface, a command line is still useful because (i) it provides a simple way to interact with a remote system (only text are exchanged between the local and remote hosts instead of graphics); (ii) it is extremely flexible and provides many customization options; (iii) you can easily automate the sequence of commands to issue for repetitive tasks; and (iv) it is faster.","title":"Basic UNIX Commands"},{"location":"unix.html#connect-to-the-programming-environment-pe","text":"If you would like to follow the following examples, you should first ssh into one of the PE hosts provided. We will use pe111 in the following example. But feel free to use pe112 up to pe120 for your practice. You should read this guide to see how to access and connect to the environment. Once you are connected, you should see a prompt like this. ooiwt@pe111:~$ This interface is provided by a UNIX bash -- this shell sits in a loop and waits for users to enter a command, then it interprets and executes the command. There are many versions of shells, the default shell for our PE is bash 1 . The following is adapted for CS1010 from the instructions created by Aaron Tan . Bugs are mine. The power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive . All commands are to be entered after the UNIX prompt of the form ooiwt@pe111:~$ ~ indicates that you are currently in your home directory. The following examples assume that user ooiwt is logged into pe111 . It might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below: Each user has his/her own home directory, which is where he/she will be automatically placed when he/she logs in to the system. The above figure shows where the home directory of the user ooiwt resides in the directory tree. The user ooiwt may create files or directories in his/her home directory, but not elsewhere unless permission is given.","title":"Connect to the Programming Environment (PE)"},{"location":"unix.html#pwd-print-current-working-directory","text":"pwd shows you which directory you are currently in ooiwt@pe111:~$ pwd /home/o/ooiwt UNIX uses forward slash / to deliminate different parts of the directory structure. This is the same notation as URLs so you should already be familiar with it.","title":"pwd: Print Current Working directory"},{"location":"unix.html#ls-list-files","text":"The ls list the files in the current working directory. ooiwt@pe111:~$ ls ooiwt@pe111:~$ If you do not have any regular files in your home directory, as you should when you first log in, you should immediately return to the bash prompt. Rule of Silence UNIX follows the rule of silence : programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program. So, if ls has nothing to list, it will list nothing (as opposed to, say, printing \"This is an empty directory.\")","title":"ls: LiSt files"},{"location":"unix.html#mkdir-make-a-subdirectory","text":"The mkdir command creates a subdirectory with the given name in the current directory. ooiwt@pe111:~$ mkdir tut01 ooiwt@pe111:~$ ls tut01 ooiwt@pe111:~$ ls -F tut01/ Here, you create a directory called tut01 . Now, when you ls , you can see the directory listed. You may also use ls -F for more information ( -F is one of the many options / flags available for the ls command. To see a complete list of the options, refer to the man pages, i.e., man ls .) The slash / beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used. You may also use the ls -l command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification. Use Ctrl + P for Command History Unix maintains a history of your previously executed UNIX commands, and you may use Ctrl + P and Ctrl + N to go through it. Press the Ctrl + P until you find a previously executed UNIX command. You may then press Enter to execute it or edit the command before executing it. This is handy when you need to repeatedly execute a long UNIX command.","title":"mkdir: MaKe a subDIRectory"},{"location":"unix.html#cd-change-directory","text":"To navigate in the directory tree, changing the current working directory from to another, we use the cd command. ooiwt@pe111:~$ cd tut01 ooiwt@pe111:~/tut01$ Note that the prompt changes to ~/tut01 to indicate that you are now in the tut01 directory below your HOME directory. Entering cd alone brings you back to your HOME directory, i.e., the directory in which you started with when you first logged into the system. ooiwt@pe111:~/tut01$ cd ooiwt@pe111:~$ Two dots .. refers to the parent directory. So, alternatively, for the case above, since we are only one level down from the HOME , to return home, we can alternatively use cd .. . ooiwt@pe111:~/tut01$ cd .. ooiwt@pe111:~$","title":"cd: Change Directory"},{"location":"unix.html#rmdir-remove-a-subdirectory","text":"rmdir removes a subDIRectory in current directory -- note that a directory must be empty before it can be removed. ooiwt@pe111:~$ rmdir tut01 ooiwt@pe111:~$ ls -F ooiwt@pe111:~$ mkdir tut01 ooiwt@pe111:~$ ls -F tut01/","title":"rmdir: ReMove a subDIRectory"},{"location":"unix.html#cp-copy-files","text":"ooiwt@pe111:~/tut01$ cp ~cs1010/tut01/hello.c . ooiwt@pe111:~/tut01$ ls hello.c The command above copies the file hello.c from the HOME of user cs1010 , under directory tut01 , to the current directory. If you want to copy the whole directory, use -r flag, where r stands for recursive copy. ooiwt@pe111:~/tut01$ cp -r ~cs1010/tut01 . In the last command above, the single . refers to the current directory. The directory tut01 and everything under it will be copied to the current directory.","title":"cp: CoPy files"},{"location":"unix.html#mv-move-or-rename-files","text":"mv can move files from one directory to another. ooiwt@pe111:~/tut01$ ls hello.c ooiwt@pe111:~/tut01$ mv hello.c .. ooiwt@pe111:~/tut01$ ls ooiwt@pe111:~/tut01$ ls .. hello.c ooiwt@pe111:~/tut01$ mv ../hello.c . Here, we tell mv to copy a file hello.c from the parent directory to the current directory. mv can also be used to rename files. ooiwt@pe111:~/tut01$ mv hello.c hello_world.c ooiwt@pe111:~/tut01$ ls hello_world.c Use TAB for Name Completion If you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type: ooiwt@pe111:~/tut01$ mv h and press the Tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"h\". Otherwise, it will fill up the filename to the point where you need to type in more characters for disambiguation. The Tab key can also complete the name of a command.","title":"mv: MoVe or rename files"},{"location":"unix.html#rm-remove-files","text":"Be careful with this command -- files deleted cannot be restored. There is no trash or recycled bin like in Mac or Windows. ooiwt@pe111:~/tut01$ rm hello.c ooiwt@pe111:~/tut01$ ls ooiwt@pe111:~/tut01$ rm -rf * While Unix command line provides lots of flexibility and power, with great power comes great responsibility. Some of the commands are extremely dangerous. rm -rf * is the most famous one. The notation * refers to all files, and the flag -f means forceful deletion (no question asked!), and -r means remove recursively everything under the current directory tree. Accidentally running this command has ruined many files. Read more here rm comes with a -i flag that interactively asks you if you are sure if you want to delete a file. It is a good idea to always run rm -i . On pe111 , we have configured everyone's account so that rm is aliased to rm -i by default. So when you run rm hello.c , it actually runs rm -i hello.c . ooiwt@pe111:~/tut01$ rm hello.c rm: remove regular file 'hello.c' ? Type y or n to answer yes or no respectively. If you set up your own UNIX OS, you should add this alias alias rm = \"rm -i\" to your .bashrc (Google to find out how). Other useful aliases to avoid accidentally overwriting existing files are: alias mv = \"mv -i\" alias cp = \"cp -i\"","title":"rm: ReMove files"},{"location":"unix.html#cat-catenate-file-content-to-the-screen","text":"ooiwt@pe111:~/tut01$ cat hello.c less is variant of cat that includes features to read each page leisurely) ooiwt@pe111:~/tut01$ less hello.c In less , use <space> to move down one page, b to move Back up one page, and q to Quit.","title":"cat: CATenate file content to the screen"},{"location":"unix.html#man-online-manual","text":"An online help facility is available in UNIX via the man command ( man stands for MANual). To look for more information about any UNIX command, for example, ls , type man ls . Type man man and refer to Man Pages to find out more about the facility. To exit man , press q . Now that you are familiar with how the UNIX bash works, I won't show the command prompt any more in the rest of this article.","title":"man: Online MANual"},{"location":"unix.html#chmod-changing-unix-file-permission","text":"It is important to guide our files properly on a multi-user system where users share the same file system. UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read ( r ), write ( w ), and execute ( x ), for four classes of users, the user who owns of the file ( u ), users in the same group as the owner ( g ), all other users ( o ), and all users ( a ) (union of all three classes before) When you run ls -l , you will see the permission encoded as strings that look like -rw------- or drwx--x--x besides other file information. The first character indicates if the file is a directory ( d ) or not ( - ). The next three characters are the permission for the owner. rwx means that the owner can do all three: reading, writing, and executing, rw- means that the owner can read and write, but cannot execute. The next three characters are the permission for the users in the same group. The last three characters are the permission for the users in the other groups. To change permission, we use the chmod command. Let's say that we want to remove the read and write permission from all other users in the group. You can run: chmod g-rw <file> where <file> is the name of the file whose permission you want to change. This would change the permission from -rw-rw-rw- to -rw----rw- , or from -rwxr--r-- to -rwx---r-- . To add executable permission to everyone, you can run: chmod a+x <file> This would change the permission from -rw-rw-rw- to -rwxrwxrwx , or from -rwxr--r-- to rwxr-xr-x , and so on. You get the idea. Another way to change the permission is to set the permission directly, instead of adding with + and removing with - . To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7. So, rwx is 7, rw- is 6, -w- is 2, --- is 0, etc. To set the permission of a file to -r--r--r-- (readable by everyone), run: chmod 444 <file> To set the permission to -rw------- , run: chmod 600 <file> and so on. It is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.","title":"chmod: Changing UNIX File Permission"},{"location":"unix.html#scp-secure-copy","text":"Secure copy, or scp , is one way to transfer files from the programming environments to your local computer for archiving or storage. Let's say you want to transfer a set of C files from the directory a01 to your local computer, then, on your local computer, run: ooiwt@macbook:~$ scp ooiwt@pe111:~/a01/*.c . Warning If you have files with the same name in the remote directory, the files will be overwritten without warning. I have lost my code a few times due to scp . The expression *.c is a regular expression that means all files with filename ending with .c . You can copy specific files as well. For instance, ooiwt@macbook:~$ scp ooiwt@pe111:~/a01/hello.c . scp supports -r (recursive copy) as well.","title":"scp: Secure Copy"},{"location":"unix.html#specifying-a-path-in-unix","text":"In any command above, when we need to refer to a directory or a file, we need to specify an unambiguous location of the directory or the file. The most precise way to specify the location is to use the full path, or the absolute path . For instance: cp /home/o/ooiwt/tut01/hello.c /home/o/ooiwt/tut01/hello_world.c That's a lot of characters to type. We could shorten it in a few ways. We could specify the location with respect to the home directory using ~ . ~ooiwt refers to the home directory of user ooiwt . cp ~ooiwt/tut01/hello.c ~ooiwt/tut01/hello_world.c If you are ooiwt , then you can omit ooiwt , since ~ without any username refers to your home directory. cp ~/tut01/hello.c ~/tut01/hello_world.c Or we could specify the location with respect to the current directory. Suppose the current working directory is ~/tut01 (i.e., we have cd into ~/tut01 ), then we could say this: cp ./hello.c ./hello_world.c Recall that a single dot . refers to the current directory. The ./ however is redundant unless you are executing a command. Since, by specifying a file name or a directory without a path (i.e., not using any / ), the bash looks for the file or directory in the current directory. So, we could just do: cp hello.c hello_world.c Another important short form for relative location is .. . Recall that this refers to the parent directory. Suppose that the current directory is in ~/tut02 . Then, to copy the files in ~/tut01 , you can run: cp ../tut01/hello.c ../tut01/hello_world.c I run fish on my macOS, as you might have noticed during the in-class demos. You can use any shell you like if you know what you are doing. Otherwise, bash is a popular one. \u21a9","title":"Specifying A Path in UNIX"},{"location":"vim.html","text":"Vim Tips I collected some tips on vim that I find helpful. If you are new to vim , please try out the command vimtutor on any machine where vim is installed, and check out the nice article Learn vim Progressively . 1. Useful Configuration You can configure your vim by putting your configuration options and scripts in the ~/.vimrc file (a hidden file named .vimrc in your home directory). This file will be loaded whenever you start vim . You can copy a sample .vimrc file from ~cs1010/.vimrc to your home directory. You can edit this file ~/.vimrc just like any other file, using vim . Help In vim, the command :help <topic> shows help about a particular topic in vim . Example, :help backup . Backup Files You can ask vim to automatically backup files that you edit. This has been a lifesaver for me on multiple occasions. In your ~/.vimrc file, set backup will cause a copy of your file to be saved with suffix ~ appended to its name every time you save. I prefer not to clutter my working directory, so I set set backupdir=~/.backup and create a directory named ~/.backup to store my backup files. So if you made changes to a file that you regretted, or if you accidentally deleted a file, you can check under ~/.backup to see if the backup can save you. Syntax Highlighting If for some reasons, syntax highlighting is not on by default, add this to your ~/.vimrc : syntax on Ruler and Numbers If you prefer to show the line number you are on and the column number you are on, adding the commands to ~/.vimrc set ruler will display the line number and the column number on the lower right corner. You can also add set number to label each line with a line number. Auto Indentation Proper indentation is important to make your code readable (to yourself and others). You should enable this in vim with: set autoindent set smartindent Autoindent will cause the next line to have the same indentation as the previous line; while smartindent has some understanding of C-like syntax (such as recognizing { and } ) and indent your code accordingly. The size of the indentation is based on the setting shiftwidth . For CS1010, please set it to either 2 or 4 : set shiftwidth=2 2. Navigation Basic Navigation Use K and J keys to move up and down (just like Gmail and Facebook!). H and L to move left and right. Other shortcuts (no need to memorize them now, just refer back when you feel like you are typing too many H J K L to see how you can navigate faster). W jump to the beginning of the next word B ump to the beginning of the previous word (reverse of w ) E jump to the end of the word (or next word when pressed again) F char: search forward in the line and sit on the next matching char T char: search forward in the line and sit on one space before the matching char Shift + 4 ($) jump to the end of line 0 jump to the beginning of the line Shift + 6 (^) jump to the first non-blank character of the line Shift + 5 (%) jump between matching parentheses Ctrl + D jump forward (Down) half page Ctrl + F jump Forward one page Ctrl + U jump backward (Up) half page Ctrl + B jump Backward half page Jumping to a Line If the compiler tells you there is an error on Line x x , you can issue :<x> to jump to Line x x . For instance, :40 will go to Line 40. 3. Editing Operations Undo Since we are on the topic of correcting mistakes, U in command mode undo your changes. Prefix it with a number n n to undo n n times. If you want to undo your undo, Ctrl + R will redo. Navigation + Editing vim is powerful because you can combine operations with navigation . For instance C to change, D to delete, Y to yank (copy). Since W is the navigation command to move over the current word, combining them we get: C W change the current word (delete the current word and enter insert mode) D W delete the current word Y W yank the current word (copy word into buffer) Can you guess what each of these do: D F Shift + 0 D F Shift + 0 C Shift + 4 Y 0 If you repeat the operation C , D , and Y , it applies to the whole line, so: C C change the whole line D D delete the whole line Y Y yank the whole line You can add a number before an operation to specify how many times you want to repeat an operation. So 5 D D deletes 5 lines, 5 D W deletes 5 words, etc. See the article Operator, the True Power of Vim for more details. Swapping Lines Sometimes you want to swap the order of two lines of code, in command mode, D D P will do the trick. D D deletes the current line, P paste it after the current line, in effect swapping the order of the two lines. Commenting blocks of code Sometimes we need to comment out a whole block of code in C for testing purposes. There are several ways to do it in vim : Place the cursor on the first line of the block of code you want to comment on. 0 to jump to the beginning of the line Shift + V enter visual mode Use the arrow key to select the block of code you want to comment on. Shift + I to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected) / / to insert the C comment character (you will see it inserted in the current line, but don't worry) Esc to escape from the visual code. To uncomment, Place the cursor on the first line of the block of code you want to comment. 0 to jump to the beginning of the line Ctrl + V enter block visual mode Use the arrow key to select the columns of text containing // X to delete them 4. Other Advanced Features Search and Replace in vim :%s/oldWord/newWord/gc : enters the command mode. % means apply to the whole document, s means substitute, g means global (otherwise, only the first occurrence of each line is replaced). c is optional -- adding it cause vim to confirm with you before each replacement Shell Command If you need to issue a shell command quickly, you don't have to exit vim , run the command, and launch vim again. You can use ! , :!<command> will issue the command to shell. E.g., :!ls You can use this to compile your current file, without exiting vim . :!make make is actually a builtin command for vim so you can also simply run :make Abbreviation You can use the command ab to abbreviate frequently typed commands. E.g., in your ~/.vimrc , ab pl cs1010_print_long( Now, when you type pl , it will be expanded into cs1010_print_long( Auto-Completion You can use Ctrl + P or Ctrl + N to auto-complete. By default, the autocomplete dictionary is based on the text in your current editing buffers. This is a very useful keystroke saver for long function and variable names. Auto-Indent the Whole File You can G G = Shift + G in command mode to auto-indent the whole file. G G is the command to go to the beginning of the file. = is the command to indent. Shift + G is the command to go to the end of the file. Splitting vim 's Viewport :sp file.c splits the vim window horizontally :vsp file.c splits the vim window vertically Ctrl + W Ctrl + W moves between the different vim viewports 5. Plugins Syntax and Style Checker I use syntastic to check for style and syntax whenever I save a file. syntastic is a vim plugin. My .vimrc configuration file contains the following: \"For syntastic set laststatus=2 set statusline+=%#warningmsg# set statusline+=%{SyntasticStatuslineFlag()} set statusline+=%* let g:syntastic_error_symbol = '\u2717' let g:syntastic_warning_symbol = '\u26a0' let g:syntastic_always_populate_loc_list = 1 let g:syntastic_auto_loc_list = 1 let g:syntastic_check_on_open = 1 let g:syntastic_check_on_wq = 0 let g:syntastic_c_checkers = [ 'clang_tidy', 'clang' ] let g:syntastic_c_compiler = 'clang' let g:syntastic_c_clang_args = '-Wall -Werror -Wextra -Iinclude' let g:syntastic_c_clang_tidy_args = '-checks=*' let g:syntastic_c_compiler_options = '-Wall -Iinclude' let g:syntastic_c_include_dirs = [ '../include', 'include' ] let g:syntastic_c_clang_tidy_post_args = \"\" By default, clang-tidy does not know where to find the header files. So if you include non-standard C headers, it will complain that it cannot find headers. To resolve this, we need to tell clang-tidy the compilation flags that we use when compiling our program. We can do this by creating a file named compile_flags.txt in your working directory (where your C files are located), containing one compilation flag per line. For instance, if the header files are located in /home/course/cs1010/include , your compile_flags.txt should contain the following two lines: -Wall -I/home/course/cs1010/include","title":"Vim"},{"location":"vim.html#vim-tips","text":"I collected some tips on vim that I find helpful. If you are new to vim , please try out the command vimtutor on any machine where vim is installed, and check out the nice article Learn vim Progressively .","title":"Vim Tips"},{"location":"vim.html#1-useful-configuration","text":"You can configure your vim by putting your configuration options and scripts in the ~/.vimrc file (a hidden file named .vimrc in your home directory). This file will be loaded whenever you start vim . You can copy a sample .vimrc file from ~cs1010/.vimrc to your home directory. You can edit this file ~/.vimrc just like any other file, using vim .","title":"1. Useful Configuration"},{"location":"vim.html#help","text":"In vim, the command :help <topic> shows help about a particular topic in vim . Example, :help backup .","title":"Help"},{"location":"vim.html#backup-files","text":"You can ask vim to automatically backup files that you edit. This has been a lifesaver for me on multiple occasions. In your ~/.vimrc file, set backup will cause a copy of your file to be saved with suffix ~ appended to its name every time you save. I prefer not to clutter my working directory, so I set set backupdir=~/.backup and create a directory named ~/.backup to store my backup files. So if you made changes to a file that you regretted, or if you accidentally deleted a file, you can check under ~/.backup to see if the backup can save you.","title":"Backup Files"},{"location":"vim.html#syntax-highlighting","text":"If for some reasons, syntax highlighting is not on by default, add this to your ~/.vimrc : syntax on","title":"Syntax Highlighting"},{"location":"vim.html#ruler-and-numbers","text":"If you prefer to show the line number you are on and the column number you are on, adding the commands to ~/.vimrc set ruler will display the line number and the column number on the lower right corner. You can also add set number to label each line with a line number.","title":"Ruler and Numbers"},{"location":"vim.html#auto-indentation","text":"Proper indentation is important to make your code readable (to yourself and others). You should enable this in vim with: set autoindent set smartindent Autoindent will cause the next line to have the same indentation as the previous line; while smartindent has some understanding of C-like syntax (such as recognizing { and } ) and indent your code accordingly. The size of the indentation is based on the setting shiftwidth . For CS1010, please set it to either 2 or 4 : set shiftwidth=2","title":"Auto Indentation"},{"location":"vim.html#2-navigation","text":"","title":"2. Navigation"},{"location":"vim.html#basic-navigation","text":"Use K and J keys to move up and down (just like Gmail and Facebook!). H and L to move left and right. Other shortcuts (no need to memorize them now, just refer back when you feel like you are typing too many H J K L to see how you can navigate faster). W jump to the beginning of the next word B ump to the beginning of the previous word (reverse of w ) E jump to the end of the word (or next word when pressed again) F char: search forward in the line and sit on the next matching char T char: search forward in the line and sit on one space before the matching char Shift + 4 ($) jump to the end of line 0 jump to the beginning of the line Shift + 6 (^) jump to the first non-blank character of the line Shift + 5 (%) jump between matching parentheses Ctrl + D jump forward (Down) half page Ctrl + F jump Forward one page Ctrl + U jump backward (Up) half page Ctrl + B jump Backward half page","title":"Basic Navigation"},{"location":"vim.html#jumping-to-a-line","text":"If the compiler tells you there is an error on Line x x , you can issue :<x> to jump to Line x x . For instance, :40 will go to Line 40.","title":"Jumping to a Line"},{"location":"vim.html#3-editing-operations","text":"","title":"3. Editing Operations"},{"location":"vim.html#undo","text":"Since we are on the topic of correcting mistakes, U in command mode undo your changes. Prefix it with a number n n to undo n n times. If you want to undo your undo, Ctrl + R will redo.","title":"Undo"},{"location":"vim.html#navigation-editing","text":"vim is powerful because you can combine operations with navigation . For instance C to change, D to delete, Y to yank (copy). Since W is the navigation command to move over the current word, combining them we get: C W change the current word (delete the current word and enter insert mode) D W delete the current word Y W yank the current word (copy word into buffer) Can you guess what each of these do: D F Shift + 0 D F Shift + 0 C Shift + 4 Y 0 If you repeat the operation C , D , and Y , it applies to the whole line, so: C C change the whole line D D delete the whole line Y Y yank the whole line You can add a number before an operation to specify how many times you want to repeat an operation. So 5 D D deletes 5 lines, 5 D W deletes 5 words, etc. See the article Operator, the True Power of Vim for more details.","title":"Navigation + Editing"},{"location":"vim.html#swapping-lines","text":"Sometimes you want to swap the order of two lines of code, in command mode, D D P will do the trick. D D deletes the current line, P paste it after the current line, in effect swapping the order of the two lines.","title":"Swapping Lines"},{"location":"vim.html#commenting-blocks-of-code","text":"Sometimes we need to comment out a whole block of code in C for testing purposes. There are several ways to do it in vim : Place the cursor on the first line of the block of code you want to comment on. 0 to jump to the beginning of the line Shift + V enter visual mode Use the arrow key to select the block of code you want to comment on. Shift + I to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected) / / to insert the C comment character (you will see it inserted in the current line, but don't worry) Esc to escape from the visual code. To uncomment, Place the cursor on the first line of the block of code you want to comment. 0 to jump to the beginning of the line Ctrl + V enter block visual mode Use the arrow key to select the columns of text containing // X to delete them","title":"Commenting blocks of code"},{"location":"vim.html#4-other-advanced-features","text":"","title":"4. Other Advanced Features"},{"location":"vim.html#search-and-replace-in-vim","text":":%s/oldWord/newWord/gc : enters the command mode. % means apply to the whole document, s means substitute, g means global (otherwise, only the first occurrence of each line is replaced). c is optional -- adding it cause vim to confirm with you before each replacement","title":"Search and Replace in vim"},{"location":"vim.html#shell-command","text":"If you need to issue a shell command quickly, you don't have to exit vim , run the command, and launch vim again. You can use ! , :!<command> will issue the command to shell. E.g., :!ls You can use this to compile your current file, without exiting vim . :!make make is actually a builtin command for vim so you can also simply run :make","title":"Shell Command"},{"location":"vim.html#abbreviation","text":"You can use the command ab to abbreviate frequently typed commands. E.g., in your ~/.vimrc , ab pl cs1010_print_long( Now, when you type pl , it will be expanded into cs1010_print_long(","title":"Abbreviation"},{"location":"vim.html#auto-completion","text":"You can use Ctrl + P or Ctrl + N to auto-complete. By default, the autocomplete dictionary is based on the text in your current editing buffers. This is a very useful keystroke saver for long function and variable names.","title":"Auto-Completion"},{"location":"vim.html#auto-indent-the-whole-file","text":"You can G G = Shift + G in command mode to auto-indent the whole file. G G is the command to go to the beginning of the file. = is the command to indent. Shift + G is the command to go to the end of the file.","title":"Auto-Indent the Whole File"},{"location":"vim.html#splitting-vims-viewport","text":":sp file.c splits the vim window horizontally :vsp file.c splits the vim window vertically Ctrl + W Ctrl + W moves between the different vim viewports","title":"Splitting vim's Viewport"},{"location":"vim.html#5-plugins","text":"","title":"5. Plugins"},{"location":"vim.html#syntax-and-style-checker","text":"I use syntastic to check for style and syntax whenever I save a file. syntastic is a vim plugin. My .vimrc configuration file contains the following: \"For syntastic set laststatus=2 set statusline+=%#warningmsg# set statusline+=%{SyntasticStatuslineFlag()} set statusline+=%* let g:syntastic_error_symbol = '\u2717' let g:syntastic_warning_symbol = '\u26a0' let g:syntastic_always_populate_loc_list = 1 let g:syntastic_auto_loc_list = 1 let g:syntastic_check_on_open = 1 let g:syntastic_check_on_wq = 0 let g:syntastic_c_checkers = [ 'clang_tidy', 'clang' ] let g:syntastic_c_compiler = 'clang' let g:syntastic_c_clang_args = '-Wall -Werror -Wextra -Iinclude' let g:syntastic_c_clang_tidy_args = '-checks=*' let g:syntastic_c_compiler_options = '-Wall -Iinclude' let g:syntastic_c_include_dirs = [ '../include', 'include' ] let g:syntastic_c_clang_tidy_post_args = \"\" By default, clang-tidy does not know where to find the header files. So if you include non-standard C headers, it will complain that it cannot find headers. To resolve this, we need to tell clang-tidy the compilation flags that we use when compiling our program. We can do this by creating a file named compile_flags.txt in your working directory (where your C files are located), containing one compilation flag per line. For instance, if the header files are located in /home/course/cs1010/include , your compile_flags.txt should contain the following two lines: -Wall -I/home/course/cs1010/include","title":"Syntax and Style Checker"},{"location":"zoom.html","text":"Using Zoom Logging into Zoom You can only join the sessions if you log in into Zoom nus-sg.zoom.us using your NUS account. To do so, you have to first log out of Zoom if you have already logged in using your non-NUS Zoom account. There are two options: Option 1 go to https://nus-sg.zoom.us/ directly and click \"Sign In\"; Follow the given instructions by entering your NUSNET ID and password. Option 2 If you get to Zoom through another link, you might be presented with the following screen. Do not enter your NUS email address and password on this screen. Instead, click on \"Sign in with SSO\". You will be presented with this screen: Enter nus-sg into the field \"Company Domain\" and click continue. You will be prompted to enter your NUSNET ID and password. Follow the instruction on the screen. Using Zoom Desktop Client Some students have reported issues when trying to join a breakout room when using Web version of Zoom (i.e., connecting through a Web browser). Please join the workshop by using the Zoom application instead of through a Web browser. Links to Join Zoom The Zoom session information is shared privately on Piazza .","title":"Zoom"},{"location":"zoom.html#using-zoom","text":"","title":"Using Zoom"},{"location":"zoom.html#logging-into-zoom","text":"You can only join the sessions if you log in into Zoom nus-sg.zoom.us using your NUS account. To do so, you have to first log out of Zoom if you have already logged in using your non-NUS Zoom account. There are two options:","title":"Logging into Zoom"},{"location":"zoom.html#option-1","text":"go to https://nus-sg.zoom.us/ directly and click \"Sign In\"; Follow the given instructions by entering your NUSNET ID and password.","title":"Option 1"},{"location":"zoom.html#option-2","text":"If you get to Zoom through another link, you might be presented with the following screen. Do not enter your NUS email address and password on this screen. Instead, click on \"Sign in with SSO\". You will be presented with this screen: Enter nus-sg into the field \"Company Domain\" and click continue. You will be prompted to enter your NUSNET ID and password. Follow the instruction on the screen.","title":"Option 2"},{"location":"zoom.html#using-zoom-desktop-client","text":"Some students have reported issues when trying to join a breakout room when using Web version of Zoom (i.e., connecting through a Web browser). Please join the workshop by using the Zoom application instead of through a Web browser.","title":"Using Zoom Desktop Client"},{"location":"zoom.html#links-to-join-zoom","text":"The Zoom session information is shared privately on Piazza .","title":"Links to Join Zoom"}]}